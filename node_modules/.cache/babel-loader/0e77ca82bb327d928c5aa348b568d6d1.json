{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandler\\\\Desktop\\\\checkers\\\\checkers\\\\Exchequer\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Display from './Display';\n/*\r\n\r\nLogic considerations\r\n\r\nInitially creating the checker positions and passing them down to components\r\n\r\nDeleting checkers once they're eliminated from the game\r\n\r\nimplementing possible moves for the checkers\r\n\r\ncheckers cannot occupy the same space\r\n\r\ncheckers must remain within the dimensions of the board\r\n\r\nneed to implement uprgading of checkers\r\n\r\n**/\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.checkerpositions = this.initBoard();\n    console.log(this.checkerpositions[0]);\n    console.log(this.checkerpositions[1]);\n    this.state = {\n      player1: false,\n      player1_checkers: this.checkerpositions[0],\n      player2_checkers: this.checkerpositions[1],\n      activechecker: [-1, -1]\n    };\n    this.playerMove = this.playerMove.bind(this);\n    this.removeActiveChecker = this.removeActiveChecker.bind(this);\n    this.calculateMove = this.calculateMove.bind(this);\n  }\n\n  calculateMove(rowid, colid) {\n    if (this.state.activechecker[0] < 0 || this.state.activechecker[1] < 0) {\n      alert(\"Active checker not set!\");\n    }\n\n    let moves = this.determineAllowedMoves();\n\n    if (moves) {\n      for (var i = 0; i < moves.length; i++) {\n        if (moves[i].position[0] == rowid && moves[i].position[1] == colid) {\n          if (this.state.player1) {\n            let activeindex = this.isItemInArray(this.state.player1_checkers, this.state.activechecker); // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\n\n            this.state.player1_checkers.splice(activeindex, 1, {\n              position: moves[i].position,\n              crowned: this.state.player1_checkers[activeindex].crowned\n            });\n\n            if (moves[i].action === \"attack\") {\n              let eliminatedopponent = moves[i].opponent;\n              let index = this.isItemInArray(this.state.player2_checkers, eliminatedopponent);\n              this.state.player2_checkers.splice(index, 1);\n            } //need to check if checker has become crowned\n\n\n            if (moves[i].position[0] == 0) {\n              //we need to crown the checker\n              this.state.player1_checkers[activeindex].crowned = true;\n            }\n\n            this.setState({\n              player1_checkers: this.state.player1_checkers,\n              player2_checkers: this.state.player2_checkers,\n              player1: false\n            });\n            return true;\n          } else {\n            let activeindex = this.isItemInArray(this.state.player2_checkers, this.state.activechecker); // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\n\n            this.state.player2_checkers.splice(activeindex, 1, {\n              position: moves[i].position,\n              crowned: this.state.player2_checkers[activeindex].crowned\n            });\n\n            if (moves[i].action === \"attack\") {\n              let eliminatedopponent = moves[i].opponent;\n              let index = this.isItemInArray(this.state.player1_checkers, eliminatedopponent);\n              this.state.player1_checkers.splice(index, 1);\n            } //need to check if checker has become crowned\n\n\n            if (moves[i].position[0] == 7) {\n              this.state.player2_checkers[activeindex].crowned = true;\n            }\n\n            this.setState({\n              player1_checkers: this.state.player1_checkers,\n              player2_checkers: this.state.player2_checkers,\n              player1: true\n            });\n            return true;\n          }\n        }\n      }\n    } else {\n      return false;\n    }\n  }\n\n  determineAllowedMoves() {\n    let moves = [];\n\n    if (this.state.player1) {\n      if (this.state.activechecker[0] - 1 >= 0) {\n        if (this.state.activechecker[1] - 1 >= 0) {\n          moves.push({\n            position: [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1],\n            action: \"move\"\n          });\n        }\n\n        if (this.state.activechecker[1] + 1 <= 7) {\n          moves.push({\n            position: [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1],\n            action: \"move\"\n          });\n        }\n      }\n\n      let removeindexes = [];\n      let itemstopush = [];\n\n      for (let i = 0; i < moves.length; i++) {\n        if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i);\n          let removed = moves[i];\n\n          if (this.state.activechecker[1] - 2 >= 0 && this.state.activechecker[0] - 2 >= 0) {\n            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1]) >= 0) {\n              if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          }\n\n          if (this.state.activechecker[1] + 2 <= 7 && this.state.activechecker[0] - 2 >= 0) {\n            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1]) >= 0) {\n              if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                    // if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    }); // }\n                  }\n                }\n              }\n            }\n          }\n        } //can't stack checkers in same Tile\n        else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n            removeindexes.push(i); // if(this.state.activechecker[0] - 2 >= 0 &&  this.state.activechecker[1] + 2 <= 7){\n            //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n            //         if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n            //             moves.push([this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]);\n            //         }\n            //     }\n            // }\n          }\n      }\n\n      for (let i = 0; i < removeindexes.length; i++) {\n        moves.splice(removeindexes[i], 1);\n      }\n\n      for (let i = 0; i < itemstopush.length; i++) {\n        moves.push(itemstopush[i]);\n      }\n    } else {\n      if (this.state.activechecker[0] + 1 <= 7) {\n        if (this.state.activechecker[1] - 1 >= 0) {\n          moves.push({\n            position: [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1],\n            action: \"move\"\n          });\n        }\n\n        if (this.state.activechecker[1] + 1 <= 7) {\n          moves.push({\n            position: [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1],\n            action: \"move\"\n          });\n        }\n      }\n\n      let removeindexes = [];\n      let itemstopush = [];\n\n      for (let i = 0; i < moves.length; i++) {\n        if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i); //diagnolly to the left\n        } else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i);\n          let removed = moves[i];\n\n          if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] - 2 >= 0) {\n            // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\n            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1]) >= 0) {\n              if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } //determine if opponents checker is in the bottom right position\n\n\n          if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] + 2 <= 7) {\n            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1]) >= 0) {\n              if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } // moves.splice(i, 1);\n\n        }\n      }\n\n      for (let i = 0; i < removeindexes.length; i++) {\n        moves.splice(removeindexes[i], 1);\n      }\n\n      for (let i = 0; i < itemstopush.length; i++) {\n        moves.push(itemstopush[i]);\n      }\n    }\n\n    return moves;\n  }\n\n  isItemInArray(array, item) {\n    for (var i = 0; i < array.length; i++) {\n      // This if statement depends on the format of your array\n      //changing this to be compatible with code in determineAllowedMoves\n      if (array[i].position != \"undefined\") {\n        if (array[i].position[0] == item[0] && array[i].position[1] == item[1]) {\n          return i;\n        }\n      } else if (array[i][0] == item[0] && array[i][1] == item[1]) {\n        return i; // Found it\n      }\n    }\n\n    return -1; // Not found\n  }\n\n  initBoard() {\n    let player1 = [];\n    let player2 = [];\n    let startingpositions = [];\n\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < 8; j++) {\n        player1.push({\n          position: [i + 6, j],\n          crowned: false\n        });\n        player2.push({\n          position: [i, j],\n          crowned: false\n        });\n      }\n    }\n\n    startingpositions.push(player1);\n    startingpositions.push(player2);\n    return startingpositions;\n  }\n\n  playerMove(rowid, colid, fnc) {\n    // alert(\"Player Move!\");\n    this.setState(state => ({\n      // player1: !state.player1,\n      activechecker: [rowid, colid]\n    }), fnc);\n  }\n\n  removeActiveChecker() {\n    this.setState({\n      activechecker: [-1, -1]\n    });\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  render() {\n    if (this.state.player1 == true) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Board, {\n        player1_checkers: this.state.player1_checkers,\n        calculateMove: this.calculateMove,\n        destroyactivechecker: this.removeActiveChecker,\n        activechecker: this.state.activechecker,\n        player2_checkers: this.state.player2_checkers,\n        player1: this.state.player1,\n        playermove: this.playerMove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), React.createElement(Display, {\n        playerturn: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(Board, {\n        player1_checkers: this.state.player1_checkers,\n        calculateMove: this.calculateMove,\n        destroyactivechecker: this.removeActiveChecker,\n        activechecker: this.state.activechecker,\n        player2_checkers: this.state.player2_checkers,\n        player1: this.state.player1,\n        playermove: this.playerMove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(Display, {\n        playerturn: 2,\n        activechecker: this.state.activechecker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:\\Users\\Chandler\\Desktop\\checkers\\checkers\\Exchequer\\src\\Game.js"],"names":["React","Board","Display","Game","Component","constructor","props","checkerpositions","initBoard","console","log","state","player1","player1_checkers","player2_checkers","activechecker","playerMove","bind","removeActiveChecker","calculateMove","rowid","colid","alert","moves","determineAllowedMoves","i","length","position","activeindex","isItemInArray","splice","crowned","action","eliminatedopponent","opponent","index","setState","push","removeindexes","itemstopush","removed","array","item","player2","startingpositions","j","fnc","componentDidMount","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\nimport Display from './Display'\r\n\r\n/*\r\n\r\nLogic considerations\r\n\r\nInitially creating the checker positions and passing them down to components\r\n\r\nDeleting checkers once they're eliminated from the game\r\n\r\nimplementing possible moves for the checkers\r\n\r\ncheckers cannot occupy the same space\r\n\r\ncheckers must remain within the dimensions of the board\r\n\r\nneed to implement uprgading of checkers\r\n\r\n**/\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.checkerpositions = this.initBoard();\r\n      console.log(this.checkerpositions[0]);\r\n      console.log(this.checkerpositions[1]);\r\n      this.state = {player1: false, player1_checkers: this.checkerpositions[0], player2_checkers: this.checkerpositions[1], activechecker: [-1,-1]};\r\n    this.playerMove = this.playerMove.bind(this);\r\n    this.removeActiveChecker = this.removeActiveChecker.bind(this);\r\n    this.calculateMove = this.calculateMove.bind(this);\r\n    }\r\n\r\n    calculateMove(rowid, colid){\r\n        if(this.state.activechecker[0] < 0 || this.state.activechecker[1] < 0)\r\n        {\r\n            alert(\"Active checker not set!\");\r\n        }\r\n        let moves = this.determineAllowedMoves()\r\n        if(moves){\r\n            for(var i = 0; i < moves.length; i++){\r\n                if(moves[i].position[0] == rowid && moves[i].position[1] == colid){\r\n                    if(this.state.player1){\r\n                        let activeindex = this.isItemInArray(this.state.player1_checkers, this.state.activechecker);\r\n                        // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\r\n                        this.state.player1_checkers.splice(activeindex, 1, {position: moves[i].position, crowned:  this.state.player1_checkers[activeindex].crowned});\r\n                        if(moves[i].action === \"attack\"){\r\n                            let eliminatedopponent = moves[i].opponent;\r\n                            let index = this.isItemInArray(this.state.player2_checkers, eliminatedopponent);\r\n                            this.state.player2_checkers.splice(index, 1);\r\n                        }\r\n                        //need to check if checker has become crowned\r\n                        if(moves[i].position[0] == 0){\r\n                            //we need to crown the checker\r\n                            this.state.player1_checkers[activeindex].crowned = true;\r\n                        }\r\n                        this.setState({player1_checkers: this.state.player1_checkers, player2_checkers: this.state.player2_checkers, player1: false})\r\n                        return true;\r\n                    }\r\n                    else{\r\n                        let activeindex = this.isItemInArray(this.state.player2_checkers, this.state.activechecker);\r\n                        // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\r\n                        this.state.player2_checkers.splice(activeindex, 1, {position: moves[i].position, crowned: this.state.player2_checkers[activeindex].crowned});\r\n                        if(moves[i].action === \"attack\"){\r\n                            let eliminatedopponent = moves[i].opponent;\r\n                            let index = this.isItemInArray(this.state.player1_checkers, eliminatedopponent);\r\n                            this.state.player1_checkers.splice(index, 1);\r\n                        }\r\n                        //need to check if checker has become crowned\r\n                        if(moves[i].position[0]  == 7){\r\n                            this.state.player2_checkers[activeindex].crowned = true;\r\n                        }\r\n                        this.setState({player1_checkers: this.state.player1_checkers, player2_checkers: this.state.player2_checkers, player1: true})\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n}\r\n\r\n    determineAllowedMoves(){\r\n        let moves = []\r\n        if(this.state.player1){\r\n            if((this.state.activechecker[0] - 1) >=0){\r\n                if((this.state.activechecker[1] - 1) >=0){\r\n                    moves.push({position: [this.state.activechecker[0]-1, this.state.activechecker[1]-1], action: \"move\"});\r\n                }\r\n                if (this.state.activechecker[1] + 1 <= 7){\r\n                    moves.push({position: [this.state.activechecker[0]-1, this.state.activechecker[1]+1], action: \"move\"});\r\n                }\r\n            }\r\n            let removeindexes = [];\r\n            let itemstopush = [];\r\n            for(let i = 0; i < moves.length; i++){\r\n                if(this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0){\r\n                   removeindexes.push(i);\r\n                   let removed = moves[i];\r\n                    if(this.state.activechecker[1] - 2 >=0 && this.state.activechecker[0] - 2 >=0){\r\n                        if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1 ]) >= 0){\r\n                            if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2 ]) === -1){\r\n                                if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2 ]) === -1){\r\n                                    if(moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2){\r\n                                        itemstopush.push({position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position})\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if(this.state.activechecker[1] + 2 <=7 && this.state.activechecker[0] - 2 >=0){\r\n                        if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1 ]) >= 0){\r\n                            if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\r\n                                if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\r\n                                    if( moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2 ){\r\n                                    // if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\r\n                                        itemstopush.push({position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position});\r\n                                    // }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //can't stack checkers in same Tile\r\n                else if(this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0){\r\n                    removeindexes.push(i);\r\n                    // if(this.state.activechecker[0] - 2 >= 0 &&  this.state.activechecker[1] + 2 <= 7){\r\n                    //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\r\n                    //         if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\r\n                    //             moves.push([this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]);\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                }\r\n            }\r\n            for(let i = 0; i < removeindexes.length; i++){\r\n                moves.splice(removeindexes[i], 1);\r\n            }\r\n            for(let i = 0; i < itemstopush.length; i++){\r\n                moves.push(itemstopush[i]);\r\n            }\r\n                \r\n\r\n        }\r\n        else{\r\n            if((this.state.activechecker[0] + 1) <= 7){\r\n                if((this.state.activechecker[1] - 1) >= 0){\r\n                    moves.push({position: [this.state.activechecker[0]+1, this.state.activechecker[1]-1], action: \"move\"});\r\n                }\r\n                if (this.state.activechecker[1] + 1 <= 7){\r\n                    moves.push({position: [this.state.activechecker[0]+1, this.state.activechecker[1]+1], action:\"move\"});\r\n                }\r\n            }\r\n            let removeindexes = [];\r\n            let itemstopush = [];\r\n            for(let i = 0; i < moves.length; i++){\r\n                if(this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0){\r\n                    removeindexes.push(i)\r\n                    //diagnolly to the left\r\n                }\r\n                else if(this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0){\r\n                    removeindexes.push(i)\r\n                    let removed = moves[i]\r\n                    if(this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] - 2 >=0){\r\n                        // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\r\n                        if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1 ]) >= 0){\r\n                            if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\r\n                                    if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\r\n                                        if( moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2 ){\r\n                                            itemstopush.push({position:[this.state.activechecker[0] + 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position});\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                    }\r\n                    \r\n                    //determine if opponents checker is in the bottom right position\r\n                    if(this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] + 2 <=7){\r\n                        if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1 ]) >= 0){\r\n                            if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2 ]) === -1){\r\n                                if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2 ]) === -1){\r\n                                    if( moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] + 2 ){\r\n                                        itemstopush.push({position:[this.state.activechecker[0] + 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position});\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // moves.splice(i, 1);\r\n                }\r\n                \r\n            }\r\n\r\n            for(let i = 0; i < removeindexes.length; i++){\r\n                moves.splice(removeindexes[i], 1);\r\n            }\r\n            for(let i = 0; i < itemstopush.length; i++){\r\n                moves.push(itemstopush[i]);\r\n            }\r\n       \r\n    }\r\n    return moves;\r\n}\r\n\r\n    isItemInArray(array, item) {\r\n        for (var i = 0; i < array.length; i++) {\r\n            // This if statement depends on the format of your array\r\n            //changing this to be compatible with code in determineAllowedMoves\r\n            if(array[i].position != \"undefined\"){\r\n                if(array[i].position[0] == item[0] && array[i].position[1] == item[1]){\r\n                    return i;\r\n                }\r\n            }\r\n            else if (array[i][0] == item[0] && array[i][1] == item[1]) {\r\n                return i;   // Found it\r\n            }\r\n\r\n        }\r\n        return -1;   // Not found\r\n    }\r\n\r\n    initBoard(){\r\n        let player1=[];\r\n        let player2=[];\r\n        let startingpositions = []\r\n        for(let i = 0 ; i < 2; i++){\r\n            for(let j = 0; j < 8; j++){\r\n                player1.push({position: [i+6,j], crowned: false});\r\n                player2.push({position: [i, j], crowned: false});\r\n            }\r\n        }\r\n        startingpositions.push(player1);\r\n        startingpositions.push(player2);\r\n        return startingpositions;\r\n    }\r\n\r\n    playerMove(rowid, colid, fnc){\r\n        // alert(\"Player Move!\");\r\n        this.setState(state => ({\r\n            // player1: !state.player1,\r\n            activechecker: [rowid, colid]\r\n          }), fnc);\r\n    }\r\n\r\n    removeActiveChecker(){\r\n        this.setState({activechecker: [-1, -1]});\r\n    }\r\n    \r\n    componentDidMount() {\r\n    }\r\n    \r\n     componentWillUnmount() {\r\n    }\r\n\r\n    \r\n     render() {\r\n         if(this.state.player1 == true){\r\n            return(\r\n                <div>\r\n                <Board player1_checkers={this.state.player1_checkers} calculateMove={this.calculateMove} destroyactivechecker={this.removeActiveChecker} activechecker={this.state.activechecker} player2_checkers={this.state.player2_checkers} player1={this.state.player1} playermove={this.playerMove}/>\r\n                \r\n                <Display playerturn={1}/>\r\n                 </div>\r\n                );\r\n         }\r\n         else{\r\n            return(\r\n                <div>\r\n                <Board player1_checkers={this.state.player1_checkers}  calculateMove={this.calculateMove} destroyactivechecker={this.removeActiveChecker} activechecker={this.state.activechecker} player2_checkers={this.state.player2_checkers} player1={this.state.player1} playermove={this.playerMove}/>\r\n                \r\n                <Display playerturn={2} activechecker={this.state.activechecker}/>\r\n                 </div>\r\n                );\r\n         }\r\n       \r\n     }\r\n  }\r\n\r\n  export default Game;"]},"metadata":{},"sourceType":"module"}