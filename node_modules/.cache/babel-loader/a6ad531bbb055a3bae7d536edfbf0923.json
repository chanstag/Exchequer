{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandler\\\\Desktop\\\\checkers\\\\checkers\\\\src\\\\Tile.js\";\nimport React from 'react';\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateChecker = this.updateChecker.bind(this);\n    this.flashChecker = this.flashChecker.bind(this);\n    this.state = {\n      flashcolor: false,\n      activechecker: this.props.activechecker\n    };\n  }\n\n  updateChecker() {\n    const canvas = this.refs[this.props.colid];\n    const ctx = canvas.getContext(\"2d\");\n    this.flashChecker(ctx, ctx.fillStyle);\n    this.intervalFlash = setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n    alert(this.props.rowid, this.props.colid);\n  }\n\n  componentDidMount() {\n    const canvas = this.refs[this.props.colid];\n    const ctx = canvas.getContext(\"2d\");\n    ctx.moveTo(0, 0);\n    ctx.lineTo(50, 0);\n    ctx.lineTo(50, 50);\n    ctx.lineTo(0, 50);\n    ctx.lineTo(0, 0);\n    ctx.stroke();\n\n    if (this.props.fill == true) {\n      ctx.fillRect(0, 0, 50, 50);\n    }\n\n    if (this.props.checkercolor == \"red\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#FF0000\";\n        ctx.fill();\n        this.setState({\n          flashing: this.flashChecker\n        });\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n      }\n\n      ctx.beginPath();\n      ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n      ctx.fillStyle = \"#FF0000\";\n      ctx.fill();\n    } else if (this.props.checkercolor == \"green\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill(); // this.setState({flashing: this.flashChecker});\n\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n      } else {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill();\n      }\n    }\n  }\n\n  flashChecker(ctx, originalcolor) {\n    alert(originalcolor);\n    this.setState({\n      flashcolor: !this.state.flashcolor\n    });\n    ctx.beginPath();\n    ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n\n    if (this.state.flashcolor) {\n      ctx.fillStyle = \"#0e11cc\";\n    } else {\n      ctx.fillStyle = originalcolor;\n    }\n\n    ctx.fill();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\n    if (this.props.checkercolor == \"red\" && this.props.player1 == true) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    } else if (this.props.checkercolor == \"green\" && this.props.player1 == false) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Tile;","map":{"version":3,"sources":["C:\\Users\\Chandler\\Desktop\\checkers\\checkers\\src\\Tile.js"],"names":["React","Tile","Component","constructor","props","updateChecker","bind","flashChecker","state","flashcolor","activechecker","canvas","refs","colid","ctx","getContext","fillStyle","intervalFlash","setInterval","alert","rowid","componentDidMount","moveTo","lineTo","stroke","fill","fillRect","checkercolor","beginPath","arc","Math","PI","setState","flashing","originalcolor","componentWillUnmount","render","player1","e","playermove"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Tile extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.updateChecker = this.updateChecker.bind(this);\r\n      this.flashChecker = this.flashChecker.bind(this);\r\n      this.state = {flashcolor: false, activechecker: this.props.activechecker};\r\n    }          \r\n\r\n    updateChecker(){\r\n      const canvas = this.refs[this.props.colid];\r\n      const ctx = canvas.getContext(\"2d\");\r\n      this.flashChecker(ctx, ctx.fillStyle);\r\n      this.intervalFlash = setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\r\n      alert(this.props.rowid, this.props.colid);\r\n    }\r\n\r\n    componentDidMount() {\r\n      const canvas = this.refs[this.props.colid]\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.moveTo(0,0);\r\n      ctx.lineTo(50,0);\r\n      ctx.lineTo(50,50);\r\n      ctx.lineTo(0, 50);\r\n      ctx.lineTo(0, 0);\r\n      ctx.stroke();\r\n      if(this.props.fill == true){\r\n        ctx.fillRect(0,0,50,50);\r\n      }\r\n      if(this.props.checkercolor == \"red\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill()\r\n          this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000)\r\n        }\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill()\r\n      }\r\n      else if(this.props.checkercolor == \"green\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n          // this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000)\r\n        }\r\n        else{\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n        }\r\n      }\r\n    }\r\n\r\n    flashChecker(ctx, originalcolor){\r\n      alert(originalcolor);\r\n      this.setState({flashcolor: !(this.state.flashcolor)})\r\n      ctx.beginPath();\r\n      ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n      if(this.state.flashcolor){\r\n        ctx.fillStyle = \"#0e11cc\";\r\n      }\r\n      else{\r\n        ctx.fillStyle = originalcolor;\r\n      }\r\n      \r\n      ctx.fill()\r\n    }\r\n    \r\n     componentWillUnmount() {\r\n    }             \r\n      render() {\r\n\r\n        //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\r\n        if(this.props.checkercolor == \"red\" && this.props.player1 == true){\r\n            return( <canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e)} height=\"50\"></canvas>\r\n         );\r\n        }\r\n        else if(this.props.checkercolor == \"green\" && this.props.player1 == false){\r\n            return( <canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e)} height=\"50\"></canvas>);\r\n        }\r\n        else{\r\n            return( <canvas ref={this.props.colid} width=\"50\" height=\"50\"></canvas>\r\n         );\r\n        }\r\n       \r\n     }\r\n    \r\n  }\r\n\r\n  export default Tile;"]},"metadata":{},"sourceType":"module"}