{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandler\\\\Desktop\\\\checkers\\\\checkers\\\\src\\\\Tile.js\";\nimport React from 'react';\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      flashcolor: false,\n      activechecker: this.props.activechecker\n    };\n  }\n\n  updateChecker() {\n    const canvas = this.refs[this.props.colid];\n    const ctx = canvas.getContext(\"2d\");\n    this.flashChecker(ctx, ctx.fillStyle);\n    alert(this.props.rowid, this.props.colid);\n  }\n\n  componentDidMount() {\n    const canvas = this.refs[this.props.colid];\n    const ctx = canvas.getContext(\"2d\");\n    ctx.moveTo(0, 0);\n    ctx.lineTo(50, 0);\n    ctx.lineTo(50, 50);\n    ctx.lineTo(0, 50);\n    ctx.lineTo(0, 0);\n    ctx.stroke();\n\n    if (this.props.fill == true) {\n      ctx.fillRect(0, 0, 50, 50);\n    }\n\n    if (this.props.checkercolor == \"red\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#FF0000\";\n        ctx.fill();\n        this.setState({\n          flashing: this.flashChecker\n        });\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n      }\n\n      ctx.beginPath();\n      ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n      ctx.fillStyle = \"#FF0000\";\n      ctx.fill();\n    } else if (this.props.checkercolor == \"green\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill(); // this.setState({flashing: this.flashChecker});\n\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n      } else {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill();\n      }\n    }\n  }\n\n  flashChecker(ctx, originalcolor) {\n    alert(originalcolor);\n    this.setState({\n      flashcolor: !this.state.flashcolor\n    });\n    ctx.beginPath();\n    ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n\n    if (this.state.flashcolor) {\n      ctx.fillStyle = \"#0e11cc\";\n    } else {\n      ctx.fillStyle = originalcolor;\n    }\n\n    ctx.fill();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\n    if (this.props.checkercolor == \"red\" && this.props.player1 == true) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    } else if (this.props.checkercolor == \"green\" && this.props.player1 == false) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Tile;","map":{"version":3,"sources":["C:\\Users\\Chandler\\Desktop\\checkers\\checkers\\src\\Tile.js"],"names":["React","Tile","Component","constructor","props","handleClick","bind","state","flashcolor","activechecker","updateChecker","canvas","refs","colid","ctx","getContext","flashChecker","fillStyle","alert","rowid","componentDidMount","moveTo","lineTo","stroke","fill","fillRect","checkercolor","beginPath","arc","Math","PI","setState","flashing","setInterval","originalcolor","componentWillUnmount","render","player1","e","playermove"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Tile extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.handleClick = this.handleClick.bind(this);\r\n      this.state = {flashcolor: false, activechecker: this.props.activechecker};\r\n    }          \r\n\r\n    updateChecker(){\r\n\r\n      const canvas = this.refs[this.props.colid];\r\n      const ctx = canvas.getContext(\"2d\");\r\n      this.flashChecker(ctx, ctx.fillStyle)\r\n\r\n\r\n      alert(this.props.rowid, this.props.colid);\r\n    }\r\n\r\n    componentDidMount() {\r\n      const canvas = this.refs[this.props.colid]\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.moveTo(0,0);\r\n      ctx.lineTo(50,0);\r\n      ctx.lineTo(50,50);\r\n      ctx.lineTo(0, 50);\r\n      ctx.lineTo(0, 0);\r\n      ctx.stroke();\r\n      if(this.props.fill == true){\r\n        ctx.fillRect(0,0,50,50);\r\n      }\r\n      if(this.props.checkercolor == \"red\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill()\r\n          this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000)\r\n        }\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill()\r\n      }\r\n      else if(this.props.checkercolor == \"green\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n          // this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000)\r\n        }\r\n        else{\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n        }\r\n      }\r\n    }\r\n\r\n    flashChecker(ctx, originalcolor){\r\n      alert(originalcolor);\r\n      this.setState({flashcolor: !this.state.flashcolor})\r\n      ctx.beginPath();\r\n      ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n      if(this.state.flashcolor){\r\n        ctx.fillStyle = \"#0e11cc\";\r\n      }\r\n      else{\r\n        ctx.fillStyle = originalcolor;\r\n      }\r\n      \r\n      ctx.fill()\r\n    }\r\n    \r\n     componentWillUnmount() {\r\n    }\r\n\r\n\r\n                  \r\n      render() {\r\n\r\n        //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\r\n        if(this.props.checkercolor == \"red\" && this.props.player1 == true){\r\n            return( <canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, e)} height=\"50\"></canvas>\r\n         );\r\n        }\r\n        else if(this.props.checkercolor == \"green\" && this.props.player1 == false){\r\n            return( <canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, e)} height=\"50\"></canvas>);\r\n        }\r\n        else{\r\n            return( <canvas ref={this.props.colid} width=\"50\" height=\"50\"></canvas>\r\n         );\r\n        }\r\n       \r\n     }\r\n    \r\n  }\r\n\r\n  export default Tile;"]},"metadata":{},"sourceType":"module"}