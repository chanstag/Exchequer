{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandler\\\\Desktop\\\\checkers\\\\checkers\\\\src\\\\Tile.js\";\nimport React from 'react';\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      flashcolor: false,\n      activechecker: this.props.activechecker\n    };\n    console.log(this.props);\n  }\n\n  handleClick() {\n    alert(this.props.rowid, this.props.colid);\n  }\n\n  componentDidMount() {\n    const canvas = this.refs[this.props.colid];\n    const ctx = canvas.getContext(\"2d\");\n    ctx.moveTo(0, 0);\n    ctx.lineTo(50, 0);\n    ctx.lineTo(50, 50);\n    ctx.lineTo(0, 50);\n    ctx.lineTo(0, 0);\n    ctx.stroke();\n\n    if (this.props.fill == true) {\n      ctx.fillRect(0, 0, 50, 50);\n    }\n\n    if (this.props.checkercolor == \"red\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#FF0000\";\n        ctx.fill();\n        this.setState({\n          flashing: this.flashChecker\n        });\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n      }\n\n      ctx.beginPath();\n      ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n      ctx.fillStyle = \"#FF0000\";\n      ctx.fill();\n    } else if (this.props.checkercolor == \"green\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill();\n        this.setState({\n          flashing: this.flashChecker\n        });\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n      } else {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill();\n      }\n    }\n  }\n\n  flashChecker(ctx, originalcolor) {\n    alert(originalcolor);\n    this.setState({\n      flashcolor: !this.state.flashcolor\n    });\n    ctx.beginPath();\n    ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n\n    if (this.state.flashcolor) {\n      ctx.fillStyle = \"343cdb\";\n    } else {\n      ctx.fillStyle = originalcolor;\n    }\n\n    ctx.fill();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\n    if (this.props.checkercolor == \"red\" && this.props.player1 == true) {\n      console.log(this.props.playermove);\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    } else if (this.props.checkercolor == \"green\" && this.props.player1 == false) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Tile;","map":{"version":3,"sources":["C:\\Users\\Chandler\\Desktop\\checkers\\checkers\\src\\Tile.js"],"names":["React","Tile","Component","constructor","props","handleClick","bind","state","flashcolor","activechecker","console","log","alert","rowid","colid","componentDidMount","canvas","refs","ctx","getContext","moveTo","lineTo","stroke","fill","fillRect","checkercolor","beginPath","arc","Math","PI","fillStyle","setState","flashing","flashChecker","setInterval","originalcolor","componentWillUnmount","render","player1","playermove","e"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Tile extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.handleClick = this.handleClick.bind(this);\r\n      this.state = {flashcolor: false, activechecker: this.props.activechecker};\r\n      console.log(this.props)\r\n    }          \r\n\r\n    handleClick(){\r\n        alert(this.props.rowid, this.props.colid);\r\n    }\r\n\r\n    componentDidMount() {\r\n      const canvas = this.refs[this.props.colid]\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.moveTo(0,0);\r\n      ctx.lineTo(50,0);\r\n      ctx.lineTo(50,50);\r\n      ctx.lineTo(0, 50);\r\n      ctx.lineTo(0, 0);\r\n      ctx.stroke();\r\n      if(this.props.fill == true){\r\n        ctx.fillRect(0,0,50,50);\r\n      }\r\n      if(this.props.checkercolor == \"red\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill()\r\n          this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000)\r\n        }\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill()\r\n      }\r\n      else if(this.props.checkercolor == \"green\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n          this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000)\r\n        }\r\n        else{\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n        }\r\n      }\r\n    }\r\n\r\n    flashChecker(ctx, originalcolor){\r\n      alert(originalcolor);\r\n      this.setState({flashcolor: !this.state.flashcolor})\r\n      ctx.beginPath();\r\n      ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n      if(this.state.flashcolor){\r\n        ctx.fillStyle = \"343cdb\";\r\n      }\r\n      else{\r\n        ctx.fillStyle = originalcolor;\r\n      }\r\n      \r\n      ctx.fill()\r\n    }\r\n    \r\n     componentWillUnmount() {\r\n    }\r\n\r\n\r\n                  \r\n      render() {\r\n\r\n        //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\r\n        if(this.props.checkercolor == \"red\" && this.props.player1 == true){\r\n            console.log(this.props.playermove)\r\n            return( <canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, e)} height=\"50\"></canvas>\r\n         );\r\n        }\r\n        else if(this.props.checkercolor == \"green\" && this.props.player1 == false){\r\n            return( <canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, e)} height=\"50\"></canvas>);\r\n        }\r\n        else{\r\n            return( <canvas ref={this.props.colid} width=\"50\" height=\"50\"></canvas>\r\n         );\r\n        }\r\n       \r\n     }\r\n    \r\n  }\r\n\r\n  export default Tile;"]},"metadata":{},"sourceType":"module"}