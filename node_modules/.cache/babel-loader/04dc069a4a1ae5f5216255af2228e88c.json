{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandler\\\\Desktop\\\\checkers\\\\checkers\\\\Exchequer\\\\src\\\\Tile.js\";\nimport React from 'react';\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSelection = () => {\n      let binaryaction = this.props.calculateMove(this.props.rowid, this.props.colid);\n\n      if (binaryaction) {\n        this.props.destroyactivechecker();\n        clearInterval(this.intervalFlash);\n        this.updateTile();\n      } // alert(this.props.rowid + \" \" + this.props.colid);\n\n    };\n\n    this.updateChecker = () => {\n      const canvas = this.refs[this.props.colid];\n      const ctx = canvas.getContext(\"2d\");\n      const originalcolor = ctx.fillStyle;\n\n      if (this.intervalFlash != \"undefined\") {\n        clearInterval(this.intervalFlash);\n      }\n\n      this.intervalFlash = setInterval(() => {\n        this.flashChecker(ctx, originalcolor);\n      }, 100); // alert(this.props.rowid, this.props.colid);\n    };\n\n    this.updateTile = () => {\n      const canvas = this.refs[this.props.colid];\n      const ctx = canvas.getContext(\"2d\");\n      ctx.moveTo(0, 0);\n      ctx.lineTo(50, 0);\n      ctx.lineTo(50, 50);\n      ctx.lineTo(0, 50);\n      ctx.lineTo(0, 0);\n      ctx.stroke();\n\n      if (this.props.fill == true) {\n        ctx.fillStyle = \"#000000\";\n        ctx.fillRect(0, 0, 50, 50);\n      } else {\n        ctx.fillStyle = \"#FFFFFF\";\n        ctx.fillRect(0, 0, 50, 50);\n      }\n\n      if (this.props.checkercolor == \"red\") {\n        if (this.props.activechecker[0] == this.props.rowid && this.props.activechecker[1] == this.props.colid) {\n          ctx.beginPath();\n          ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n          ctx.fillStyle = \"#FF0000\";\n          ctx.fill();\n          this.intervalFlash = setInterval(() => {\n            this.flashChecker(ctx, ctx.fillStyle);\n          }, 100);\n        } else {\n          ctx.beginPath();\n          ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n          ctx.fillStyle = \"#FF0000\";\n          ctx.fill();\n        }\n      } else if (this.props.checkercolor == \"green\") {\n        if (this.props.activechecker[0] == this.props.rowid && this.props.activechecker[1] == this.props.colid) {\n          ctx.beginPath();\n          ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n          ctx.fillStyle = \"#008000\";\n          ctx.fill(); // this.setState({flashing: this.flashChecker});\n\n          this.intervalFlash = setInterval(() => {\n            this.flashChecker(ctx, ctx.fillStyle);\n          }, 100);\n        } else {\n          ctx.beginPath();\n          ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n          ctx.fillStyle = \"#008000\";\n          ctx.fill();\n        }\n      }\n    };\n\n    this.flashChecker = (ctx, originalcolor) => {\n      this.setState({\n        flashcolor: !this.state.flashcolor\n      }, () => {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n\n        if (this.state.flashcolor) {\n          ctx.fillStyle = \"#0e11cc\";\n        } else {\n          ctx.fillStyle = originalcolor;\n        }\n\n        ctx.fill();\n      });\n    };\n\n    this.updateChecker = this.updateChecker;\n    this.flashChecker = this.flashChecker;\n    this.onSelection = this.onSelection;\n    this.updateTile = this.updateTile;\n    this.state = {\n      flashcolor: false\n    };\n  }\n\n  componentDidUpdate(prevprops) {\n    if (this.props.checkercolor !== prevprops.checkercolor) {\n      this.updateTile();\n    }\n\n    if (this.props.activechecker[0] === -1 && this.props.activechecker[0] === -1 && prevprops.activechecker[0] >= 0 && prevprops.activechecker[1] >= 0) {\n      clearInterval(this.intervalFlash);\n      this.updateTile();\n    }\n  }\n\n  componentDidMount() {\n    this.updateTile();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\n    if (this.props.checkercolor == \"red\" && this.props.player1 == true) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      });\n    } else if (this.props.checkercolor == \"green\" && this.props.player1 == false) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => {\n          this.onSelection();\n        },\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Tile;","map":{"version":3,"sources":["C:\\Users\\Chandler\\Desktop\\checkers\\checkers\\Exchequer\\src\\Tile.js"],"names":["React","Tile","Component","constructor","props","onSelection","binaryaction","calculateMove","rowid","colid","destroyactivechecker","clearInterval","intervalFlash","updateTile","updateChecker","canvas","refs","ctx","getContext","originalcolor","fillStyle","setInterval","flashChecker","moveTo","lineTo","stroke","fill","fillRect","checkercolor","activechecker","beginPath","arc","Math","PI","setState","flashcolor","state","componentDidUpdate","prevprops","componentDidMount","componentWillUnmount","render","player1","e","playermove"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SASlBC,WATkB,GASJ,MAAI;AAChB,UAAIC,YAAY,GAAG,KAAKF,KAAL,CAAWG,aAAX,CAAyB,KAAKH,KAAL,CAAWI,KAApC,EAA2C,KAAKJ,KAAL,CAAWK,KAAtD,CAAnB;;AACA,UAAGH,YAAH,EAAgB;AACd,aAAKF,KAAL,CAAWM,oBAAX;AACAC,QAAAA,aAAa,CAAC,KAAKC,aAAN,CAAb;AACA,aAAKC,UAAL;AACD,OANe,CAOhB;;AACD,KAjBiB;;AAAA,SAmBlBC,aAnBkB,GAmBF,MAAI;AAClB,YAAMC,MAAM,GAAG,KAAKC,IAAL,CAAU,KAAKZ,KAAL,CAAWK,KAArB,CAAf;AACA,YAAMQ,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACA,YAAMC,aAAa,GAAGF,GAAG,CAACG,SAA1B;;AACA,UAAG,KAAKR,aAAL,IAAsB,WAAzB,EAAqC;AACnCD,QAAAA,aAAa,CAAC,KAAKC,aAAN,CAAb;AACD;;AACD,WAAKA,aAAL,GAAqBS,WAAW,CAAC,MAAI;AAAC,aAAKC,YAAL,CAAkBL,GAAlB,EAAuBE,aAAvB;AAAsC,OAA5C,EAA8C,GAA9C,CAAhC,CAPkB,CAQlB;AACD,KA5BiB;;AAAA,SA8BlBN,UA9BkB,GA8BL,MAAI;AACb,YAAME,MAAM,GAAG,KAAKC,IAAL,CAAU,KAAKZ,KAAL,CAAWK,KAArB,CAAf;AACA,YAAMQ,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACAD,MAAAA,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAa,CAAb;AACAN,MAAAA,GAAG,CAACO,MAAJ,CAAW,EAAX,EAAc,CAAd;AACAP,MAAAA,GAAG,CAACO,MAAJ,CAAW,EAAX,EAAc,EAAd;AACAP,MAAAA,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAc,EAAd;AACAP,MAAAA,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAc,CAAd;AACAP,MAAAA,GAAG,CAACQ,MAAJ;;AACA,UAAG,KAAKrB,KAAL,CAAWsB,IAAX,IAAmB,IAAtB,EAA2B;AACzBT,QAAAA,GAAG,CAACG,SAAJ,GAAiB,SAAjB;AACAH,QAAAA,GAAG,CAACU,QAAJ,CAAa,CAAb,EAAe,CAAf,EAAiB,EAAjB,EAAoB,EAApB;AACD,OAHD,MAII;AACFV,QAAAA,GAAG,CAACG,SAAJ,GAAiB,SAAjB;AACAH,QAAAA,GAAG,CAACU,QAAJ,CAAa,CAAb,EAAe,CAAf,EAAiB,EAAjB,EAAoB,EAApB;AACD;;AACD,UAAG,KAAKvB,KAAL,CAAWwB,YAAX,IAA2B,KAA9B,EAAoC;AAClC,YAAG,KAAKxB,KAAL,CAAWyB,aAAX,CAAyB,CAAzB,KAA+B,KAAKzB,KAAL,CAAWI,KAA1C,IAAmD,KAAKJ,KAAL,CAAWyB,aAAX,CAAyB,CAAzB,KAA+B,KAAKzB,KAAL,CAAWK,KAAhG,EAAsG;AACpGQ,UAAAA,GAAG,CAACa,SAAJ;AACAb,UAAAA,GAAG,CAACc,GAAJ,CAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,IAAEC,IAAI,CAACC,EAA9B;AACAhB,UAAAA,GAAG,CAACG,SAAJ,GAAgB,SAAhB;AACAH,UAAAA,GAAG,CAACS,IAAJ;AACA,eAAKd,aAAL,GAAqBS,WAAW,CAAC,MAAI;AAAC,iBAAKC,YAAL,CAAkBL,GAAlB,EAAuBA,GAAG,CAACG,SAA3B;AAAsC,WAA5C,EAA8C,GAA9C,CAAhC;AACD,SAND,MAOI;AACFH,UAAAA,GAAG,CAACa,SAAJ;AACAb,UAAAA,GAAG,CAACc,GAAJ,CAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,IAAEC,IAAI,CAACC,EAA9B;AACAhB,UAAAA,GAAG,CAACG,SAAJ,GAAgB,SAAhB;AACAH,UAAAA,GAAG,CAACS,IAAJ;AACD;AACF,OAdD,MAeK,IAAG,KAAKtB,KAAL,CAAWwB,YAAX,IAA2B,OAA9B,EAAsC;AACzC,YAAG,KAAKxB,KAAL,CAAWyB,aAAX,CAAyB,CAAzB,KAA+B,KAAKzB,KAAL,CAAWI,KAA1C,IAAmD,KAAKJ,KAAL,CAAWyB,aAAX,CAAyB,CAAzB,KAA+B,KAAKzB,KAAL,CAAWK,KAAhG,EAAsG;AACpGQ,UAAAA,GAAG,CAACa,SAAJ;AACAb,UAAAA,GAAG,CAACc,GAAJ,CAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,IAAEC,IAAI,CAACC,EAA9B;AACAhB,UAAAA,GAAG,CAACG,SAAJ,GAAgB,SAAhB;AACAH,UAAAA,GAAG,CAACS,IAAJ,GAJoG,CAKpG;;AACA,eAAKd,aAAL,GAAqBS,WAAW,CAAC,MAAI;AAAC,iBAAKC,YAAL,CAAkBL,GAAlB,EAAuBA,GAAG,CAACG,SAA3B;AAAsC,WAA5C,EAA8C,GAA9C,CAAhC;AACD,SAPD,MAQI;AACFH,UAAAA,GAAG,CAACa,SAAJ;AACAb,UAAAA,GAAG,CAACc,GAAJ,CAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,IAAEC,IAAI,CAACC,EAA9B;AACAhB,UAAAA,GAAG,CAACG,SAAJ,GAAgB,SAAhB;AACAH,UAAAA,GAAG,CAACS,IAAJ;AACD;AACF;AACJ,KA9EiB;;AAAA,SA8FlBJ,YA9FkB,GA8FH,CAACL,GAAD,EAAME,aAAN,KAAuB;AACpC,WAAKe,QAAL,CAAc;AAACC,QAAAA,UAAU,EAAE,CAAE,KAAKC,KAAL,CAAWD;AAA1B,OAAd,EAAsD,MAAI;AAC1DlB,QAAAA,GAAG,CAACa,SAAJ;AACAb,QAAAA,GAAG,CAACc,GAAJ,CAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,IAAEC,IAAI,CAACC,EAA9B;;AACA,YAAG,KAAKG,KAAL,CAAWD,UAAd,EAAyB;AACvBlB,UAAAA,GAAG,CAACG,SAAJ,GAAgB,SAAhB;AACD,SAFD,MAGI;AACFH,UAAAA,GAAG,CAACG,SAAJ,GAAgBD,aAAhB;AACD;;AAEDF,QAAAA,GAAG,CAACS,IAAJ;AACC,OAXD;AAYD,KA3GiB;;AAEhB,SAAKZ,aAAL,GAAqB,KAAKA,aAA1B;AACA,SAAKQ,YAAL,GAAoB,KAAKA,YAAzB;AACA,SAAKjB,WAAL,GAAmB,KAAKA,WAAxB;AACA,SAAKQ,UAAL,GAAkB,KAAKA,UAAvB;AACA,SAAKuB,KAAL,GAAa;AAACD,MAAAA,UAAU,EAAE;AAAb,KAAb;AACD;;AAyEDE,EAAAA,kBAAkB,CAACC,SAAD,EAAW;AAC3B,QAAG,KAAKlC,KAAL,CAAWwB,YAAX,KAA4BU,SAAS,CAACV,YAAzC,EAAsD;AACpD,WAAKf,UAAL;AACD;;AACD,QAAG,KAAKT,KAAL,CAAWyB,aAAX,CAAyB,CAAzB,MAAgC,CAAC,CAAjC,IAAsC,KAAKzB,KAAL,CAAWyB,aAAX,CAAyB,CAAzB,MAAgC,CAAC,CAAvE,IAA4ES,SAAS,CAACT,aAAV,CAAwB,CAAxB,KAA8B,CAA1G,IAA+GS,SAAS,CAACT,aAAV,CAAwB,CAAxB,KAA8B,CAAhJ,EAAkJ;AAChJlB,MAAAA,aAAa,CAAC,KAAKC,aAAN,CAAb;AACA,WAAKC,UAAL;AACD;AACF;;AAED0B,EAAAA,iBAAiB,GAAG;AAClB,SAAK1B,UAAL;AACD;;AAiBA2B,EAAAA,oBAAoB,GAAG,CACvB;;AACCC,EAAAA,MAAM,GAAG;AAEP;AACA,QAAG,KAAKrC,KAAL,CAAWwB,YAAX,IAA2B,KAA3B,IAAoC,KAAKxB,KAAL,CAAWsC,OAAX,IAAsB,IAA7D,EAAkE;AAC9D,aAAO;AAAQ,QAAA,GAAG,EAAE,KAAKtC,KAAL,CAAWK,KAAxB;AAA+B,QAAA,KAAK,EAAC,IAArC;AAA0C,QAAA,OAAO,EAAGkC,CAAD,IAAO,KAAKvC,KAAL,CAAWwC,UAAX,CAAsB,KAAKxC,KAAL,CAAWI,KAAjC,EAAwC,KAAKJ,KAAL,CAAWK,KAAnD,EAA0D,KAAKK,aAA/D,EAA8E6B,CAA9E,CAA1D;AAA4I,QAAA,MAAM,EAAC,IAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFD,MAGK,IAAG,KAAKvC,KAAL,CAAWwB,YAAX,IAA2B,OAA3B,IAAsC,KAAKxB,KAAL,CAAWsC,OAAX,IAAsB,KAA/D,EAAqE;AACtE,aAAO;AAAQ,QAAA,GAAG,EAAE,KAAKtC,KAAL,CAAWK,KAAxB;AAA+B,QAAA,KAAK,EAAC,IAArC;AAA0C,QAAA,OAAO,EAAGkC,CAAD,IAAO,KAAKvC,KAAL,CAAWwC,UAAX,CAAsB,KAAKxC,KAAL,CAAWI,KAAjC,EAAwC,KAAKJ,KAAL,CAAWK,KAAnD,EAA0D,KAAKK,aAA/D,EAA8E6B,CAA9E,CAA1D;AAA4I,QAAA,MAAM,EAAC,IAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFI,MAGD;AACA,aAAO;AAAQ,QAAA,GAAG,EAAE,KAAKvC,KAAL,CAAWK,KAAxB;AAA+B,QAAA,KAAK,EAAC,IAArC;AAA0C,QAAA,OAAO,EAAGkC,CAAD,IAAK;AAAC,eAAKtC,WAAL;AAAoB,SAA7E;AAA+E,QAAA,MAAM,EAAC,IAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AAEH;;AA7H4B;;AAiIhC,eAAeJ,IAAf","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Tile extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.updateChecker = this.updateChecker;\r\n      this.flashChecker = this.flashChecker;\r\n      this.onSelection = this.onSelection;\r\n      this.updateTile = this.updateTile;\r\n      this.state = {flashcolor: false};\r\n    }          \r\n\r\n    onSelection = ()=>{\r\n      let binaryaction = this.props.calculateMove(this.props.rowid, this.props.colid);\r\n      if(binaryaction){\r\n        this.props.destroyactivechecker();\r\n        clearInterval(this.intervalFlash);\r\n        this.updateTile();\r\n      }\r\n      // alert(this.props.rowid + \" \" + this.props.colid);\r\n    }\r\n\r\n    updateChecker = ()=>{\r\n      const canvas = this.refs[this.props.colid];\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const originalcolor = ctx.fillStyle;\r\n      if(this.intervalFlash != \"undefined\"){\r\n        clearInterval(this.intervalFlash);\r\n      }\r\n      this.intervalFlash = setInterval(()=>{this.flashChecker(ctx, originalcolor)}, 100);\r\n      // alert(this.props.rowid, this.props.colid);\r\n    }\r\n\r\n    updateTile = ()=>{\r\n        const canvas = this.refs[this.props.colid]\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.moveTo(0,0);\r\n        ctx.lineTo(50,0);\r\n        ctx.lineTo(50,50);\r\n        ctx.lineTo(0, 50);\r\n        ctx.lineTo(0, 0);\r\n        ctx.stroke();\r\n        if(this.props.fill == true){\r\n          ctx.fillStyle =  \"#000000\";\r\n          ctx.fillRect(0,0,50,50);\r\n        }\r\n        else{\r\n          ctx.fillStyle =  \"#FFFFFF\";\r\n          ctx.fillRect(0,0,50,50);\r\n        }\r\n        if(this.props.checkercolor == \"red\"){\r\n          if(this.props.activechecker[0] == this.props.rowid && this.props.activechecker[1] == this.props.colid){\r\n            ctx.beginPath();\r\n            ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n            ctx.fillStyle = \"#FF0000\";\r\n            ctx.fill()\r\n            this.intervalFlash = setInterval(()=>{this.flashChecker(ctx, ctx.fillStyle)}, 100);\r\n          }\r\n          else{\r\n            ctx.beginPath();\r\n            ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n            ctx.fillStyle = \"#FF0000\";\r\n            ctx.fill();\r\n          }\r\n        }\r\n        else if(this.props.checkercolor == \"green\"){\r\n          if(this.props.activechecker[0] == this.props.rowid && this.props.activechecker[1] == this.props.colid){\r\n            ctx.beginPath();\r\n            ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n            ctx.fillStyle = \"#008000\";\r\n            ctx.fill()\r\n            // this.setState({flashing: this.flashChecker});\r\n            this.intervalFlash = setInterval(()=>{this.flashChecker(ctx, ctx.fillStyle)}, 100)\r\n          }\r\n          else{\r\n            ctx.beginPath();\r\n            ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n            ctx.fillStyle = \"#008000\";\r\n            ctx.fill()\r\n          }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops){\r\n      if(this.props.checkercolor !== prevprops.checkercolor){\r\n        this.updateTile();\r\n      }\r\n      if(this.props.activechecker[0] === -1 && this.props.activechecker[0] === -1 && prevprops.activechecker[0] >= 0 && prevprops.activechecker[1] >= 0){\r\n        clearInterval(this.intervalFlash);\r\n        this.updateTile();\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.updateTile();\r\n    }\r\n\r\n    flashChecker = (ctx, originalcolor) =>{\r\n      this.setState({flashcolor: !(this.state.flashcolor)}, ()=>{\r\n      ctx.beginPath();\r\n      ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n      if(this.state.flashcolor){\r\n        ctx.fillStyle = \"#0e11cc\";\r\n      }\r\n      else{\r\n        ctx.fillStyle = originalcolor;\r\n      }\r\n      \r\n      ctx.fill()\r\n      });\r\n    }\r\n    \r\n     componentWillUnmount() {\r\n    }             \r\n      render() {\r\n\r\n        //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\r\n        if(this.props.checkercolor == \"red\" && this.props.player1 == true){\r\n            return(<canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e)} height=\"50\"></canvas>);\r\n        }\r\n        else if(this.props.checkercolor == \"green\" && this.props.player1 == false){\r\n            return(<canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e)} height=\"50\"></canvas>);\r\n        }\r\n        else{\r\n            return(<canvas ref={this.props.colid} width=\"50\" onClick={(e)=>{this.onSelection();}} height=\"50\"></canvas>);\r\n        }\r\n       \r\n     }\r\n    \r\n  }\r\n\r\n  export default Tile;"]},"metadata":{},"sourceType":"module"}