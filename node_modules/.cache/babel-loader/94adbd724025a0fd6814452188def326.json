{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandler\\\\Desktop\\\\checkers\\\\checkers\\\\src\\\\Tile.js\";\nimport React from 'react';\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateChecker = this.updateChecker.bind(this);\n    this.flashChecker = this.flashChecker.bind(this);\n    this.onSelection = this.onSelection.bind(this);\n    this.state = {\n      flashcolor: false,\n      activechecker: this.props.activechecker\n    };\n  }\n\n  onSelection() {\n    alert(this.props.rowid + \" \" + this.props.colid);\n  }\n\n  updateChecker() {\n    const canvas = this.refs[this.props.colid];\n    const ctx = canvas.getContext(\"2d\");\n    const originalcolor = ctx.fillStyle;\n    this.intervalFlash = setInterval(() => {\n      this.flashChecker(ctx, originalcolor);\n    }, 100); // alert(this.props.rowid, this.props.colid);\n  }\n\n  componentDidMount() {\n    const canvas = this.refs[this.props.colid];\n    const ctx = canvas.getContext(\"2d\");\n    ctx.moveTo(0, 0);\n    ctx.lineTo(50, 0);\n    ctx.lineTo(50, 50);\n    ctx.lineTo(0, 50);\n    ctx.lineTo(0, 0);\n    ctx.stroke();\n\n    if (this.props.fill == true) {\n      ctx.fillRect(0, 0, 50, 50);\n    }\n\n    if (this.props.checkercolor == \"red\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#FF0000\";\n        ctx.fill();\n        this.setState({\n          flashing: this.flashChecker\n        });\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000);\n      } else {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#FF0000\";\n        ctx.fill();\n      }\n    } else if (this.props.checkercolor == \"green\") {\n      if (this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid) {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill(); // this.setState({flashing: this.flashChecker});\n\n        setInterval(this.flashChecker(ctx, ctx.fillStyle), 100);\n      } else {\n        ctx.beginPath();\n        ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n        ctx.fillStyle = \"#008000\";\n        ctx.fill();\n      }\n    }\n  }\n\n  flashChecker(ctx, originalcolor) {\n    this.setState({\n      flashcolor: !this.state.flashcolor\n    }, () => {\n      ctx.beginPath();\n      ctx.arc(25, 25, 20, 0, 2 * Math.PI);\n\n      if (this.state.flashcolor) {\n        ctx.fillStyle = \"#0e11cc\";\n      } else {\n        ctx.fillStyle = originalcolor;\n      }\n\n      ctx.fill();\n    });\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\n    if (this.props.checkercolor == \"red\" && this.props.player1 == true) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      });\n    } else if (this.props.checkercolor == \"green\" && this.props.player1 == false) {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e),\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"canvas\", {\n        ref: this.props.colid,\n        width: \"50\",\n        onClick: e => {\n          this.onSelection();\n        },\n        height: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Tile;","map":{"version":3,"sources":["C:\\Users\\Chandler\\Desktop\\checkers\\checkers\\src\\Tile.js"],"names":["React","Tile","Component","constructor","props","updateChecker","bind","flashChecker","onSelection","state","flashcolor","activechecker","alert","rowid","colid","canvas","refs","ctx","getContext","originalcolor","fillStyle","intervalFlash","setInterval","componentDidMount","moveTo","lineTo","stroke","fill","fillRect","checkercolor","beginPath","arc","Math","PI","setState","flashing","componentWillUnmount","render","player1","e","playermove"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Tile extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.updateChecker = this.updateChecker.bind(this);\r\n      this.flashChecker = this.flashChecker.bind(this);\r\n      this.onSelection = this.onSelection.bind(this);\r\n      this.state = {flashcolor: false, activechecker: this.props.activechecker};\r\n    }          \r\n\r\n    onSelection(){\r\n      alert(this.props.rowid + \" \" + this.props.colid);\r\n    }\r\n    updateChecker(){\r\n      const canvas = this.refs[this.props.colid];\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const originalcolor = ctx.fillStyle;\r\n      this.intervalFlash = setInterval(()=>{this.flashChecker(ctx, originalcolor)}, 100);\r\n      // alert(this.props.rowid, this.props.colid);\r\n    }\r\n\r\n    componentDidMount() {\r\n      const canvas = this.refs[this.props.colid]\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.moveTo(0,0);\r\n      ctx.lineTo(50,0);\r\n      ctx.lineTo(50,50);\r\n      ctx.lineTo(0, 50);\r\n      ctx.lineTo(0, 0);\r\n      ctx.stroke();\r\n      if(this.props.fill == true){\r\n        ctx.fillRect(0,0,50,50);\r\n      }\r\n      if(this.props.checkercolor == \"red\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill()\r\n          this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 1000)\r\n        }\r\n        else{\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#FF0000\";\r\n          ctx.fill();\r\n        }\r\n      }\r\n      else if(this.props.checkercolor == \"green\"){\r\n        if(this.state.activechecker[0] == this.props.rowid && this.state.activechecker[1] == this.props.colid){\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n          // this.setState({flashing: this.flashChecker});\r\n          setInterval(this.flashChecker(ctx, ctx.fillStyle), 100)\r\n        }\r\n        else{\r\n          ctx.beginPath();\r\n          ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n          ctx.fillStyle = \"#008000\";\r\n          ctx.fill()\r\n        }\r\n      }\r\n    }\r\n\r\n    flashChecker(ctx, originalcolor){\r\n      this.setState({flashcolor: !(this.state.flashcolor)}, ()=>{\r\n      ctx.beginPath();\r\n      ctx.arc(25, 25, 20, 0, 2*Math.PI);\r\n      if(this.state.flashcolor){\r\n        ctx.fillStyle = \"#0e11cc\";\r\n      }\r\n      else{\r\n        ctx.fillStyle = originalcolor;\r\n      }\r\n      \r\n      ctx.fill()\r\n      });\r\n    }\r\n    \r\n     componentWillUnmount() {\r\n    }             \r\n      render() {\r\n\r\n        //I'm pretty sure this decision making being done here violates the abstract state principle, this should be performed in component above\r\n        if(this.props.checkercolor == \"red\" && this.props.player1 == true){\r\n            return(<canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e)} height=\"50\"></canvas>);\r\n        }\r\n        else if(this.props.checkercolor == \"green\" && this.props.player1 == false){\r\n            return(<canvas ref={this.props.colid} width=\"50\" onClick={(e) => this.props.playermove(this.props.rowid, this.props.colid, this.updateChecker, e)} height=\"50\"></canvas>);\r\n        }\r\n        else{\r\n            return(<canvas ref={this.props.colid} width=\"50\" onClick={(e)=>{this.onSelection();}} height=\"50\"></canvas>);\r\n        }\r\n       \r\n     }\r\n    \r\n  }\r\n\r\n  export default Tile;"]},"metadata":{},"sourceType":"module"}