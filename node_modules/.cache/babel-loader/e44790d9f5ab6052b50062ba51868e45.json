{"ast":null,"code":"var _jsxFileName = \"/Users/chanstag/Desktop/reactpractice/Exchequer/src/Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Display from './Display';\n/*\n\nLogic considerations\n\nInitially creating the checker positions and passing them down to components\n\nDeleting checkers once they're eliminated from the game\n\nimplementing possible moves for the checkers\n\ncheckers cannot occupy the same space\n\ncheckers must remain within the dimensions of the board\n\nneed to implement uprgading of checkers\n\n**/\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.moveForward = player_turn => {\n      let moves = [];\n\n      if (player_turn) {\n        // if(this.state.activechecker.crowned){\n        // }\n        // else{\n        if (this.state.activechecker[1] - 1 >= 0) {\n          moves.push({\n            position: [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1],\n            action: \"move\"\n          });\n        }\n\n        if (this.state.activechecker[1] + 1 <= 7) {\n          moves.push({\n            position: [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1],\n            action: \"move\"\n          });\n        }\n\n        let removeindexes = [];\n        let itemstopush = [];\n\n        for (let i = 0; i < moves.length; i++) {\n          if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n            removeindexes.push(i);\n            let removed = moves[i];\n\n            if (this.state.activechecker[1] - 2 >= 0 && this.state.activechecker[0] - 2 >= 0) {\n              if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1]) >= 0) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                  if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                    if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                      itemstopush.push({\n                        position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2],\n                        action: \"attack\",\n                        opponent: removed.position\n                      });\n                    }\n                  }\n                }\n              }\n            }\n\n            if (this.state.activechecker[1] + 2 <= 7 && this.state.activechecker[0] - 2 >= 0) {\n              if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1]) >= 0) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                  if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                    if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                      // if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                      itemstopush.push({\n                        position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2],\n                        action: \"attack\",\n                        opponent: removed.position\n                      }); // }\n                    }\n                  }\n                }\n              }\n            }\n          } //can't stack checkers in same Tile\n          else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n              removeindexes.push(i); // if(this.state.activechecker.position[0] - 2 >= 0 &&  this.state.activechecker.position[1] + 2 <= 7){\n              //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n              //         if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n              //             moves.push([this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] - 2]);\n              //         }\n              //     }\n              // }\n            }\n        }\n\n        for (let i = 0; i < removeindexes.length; i++) {\n          moves.splice(removeindexes[i], 1);\n        }\n\n        for (let i = 0; i < itemstopush.length; i++) {\n          moves.push(itemstopush[i]);\n        }\n      } // }\n      else {\n          if (this.state.activechecker[1] - 1 >= 0) {\n            moves.push({\n              position: [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1],\n              action: \"move\"\n            });\n          }\n\n          if (this.state.activechecker[1] + 1 <= 7) {\n            moves.push({\n              position: [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1],\n              action: \"move\"\n            });\n          }\n\n          let removeindexes = [];\n          let itemstopush = [];\n\n          for (let i = 0; i < moves.length; i++) {\n            if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n              removeindexes.push(i);\n              let removed = moves[i];\n\n              if (this.state.activechecker[1] + 2 <= 7 && this.state.activechecker[0] + 2 <= 7) {\n                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1]) >= 0) {\n                  if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                    if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                      if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                        itemstopush.push({\n                          position: [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2],\n                          action: \"attack\",\n                          opponent: removed.position\n                        });\n                      }\n                    }\n                  }\n                }\n              }\n\n              if (this.state.activechecker[1] - 2 >= 0 && this.state.activechecker[0] + 2 <= 7) {\n                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1]) >= 0) {\n                  if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                    if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                      if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                        // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                        itemstopush.push({\n                          position: [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2],\n                          action: \"attack\",\n                          opponent: removed.position\n                        }); // }\n                      }\n                    }\n                  }\n                }\n              }\n            } //can't stack checkers in same Tile\n            else if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n                removeindexes.push(i); // if(this.state.activechecker.position[0] - 2 >= 0 &&  this.state.activechecker.position[1] + 2 <= 7){\n                //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n                //         if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n                //             moves.push([this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] - 2]);\n                //         }\n                //     }\n                // }\n              }\n          }\n\n          for (let i = 0; i < removeindexes.length; i++) {\n            moves.splice(removeindexes[i], 1);\n          }\n\n          for (let i = 0; i < itemstopush.length; i++) {\n            moves.push(itemstopush[i]);\n          }\n        }\n\n      return moves;\n    };\n\n    this.isItemInArray = (array, item) => {\n      for (var i = 0; i < array.length; i++) {\n        // This if statement depends on the format of your array\n        //changing this to be compatible with code in determineAllowedMoves\n        if (typeof array[i].position != \"undefined\") {\n          if (array[i].position[0] == item[0] && array[i].position[1] == item[1]) {\n            return i;\n          }\n        } else if (array[i][0] == item[0] && array[i][1] == item[1]) {\n          return i; // Found it\n        }\n      }\n\n      return -1; // Not found\n    };\n\n    this.initBoard = () => {\n      let player1 = [];\n      let player2 = [];\n      let startingpositions = [];\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 8; j++) {\n          player1.push({\n            position: [i + 6, j],\n            crowned: false\n          });\n          player2.push({\n            position: [i, j],\n            crowned: false\n          });\n        }\n      }\n\n      startingpositions.push(player1);\n      startingpositions.push(player2);\n      return startingpositions;\n    };\n\n    this.playerMove = (rowid, colid, fnc) => {\n      // alert(\"Player Move!\");\n      this.setState(state => ({\n        // player1: !state.player1,\n        activechecker: [rowid, colid]\n      }), fnc);\n    };\n\n    this.removeActiveChecker = () => {\n      this.setState({\n        activechecker: [-1, -1]\n      });\n    };\n\n    this.componentDidMount = () => {};\n\n    this.componentWillUnmount = () => {};\n\n    this.render = () => {\n      if (this.state.player1 == true) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 543\n          },\n          __self: this\n        }, React.createElement(Board, {\n          player1_checkers: this.state.player1_checkers,\n          calculateMove: this.calculateMove,\n          destroyactivechecker: this.removeActiveChecker,\n          activechecker: this.state.activechecker,\n          player2_checkers: this.state.player2_checkers,\n          player1: this.state.player1,\n          playermove: this.playerMove,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 544\n          },\n          __self: this\n        }), React.createElement(Display, {\n          playerturn: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 546\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 552\n          },\n          __self: this\n        }, React.createElement(Board, {\n          player1_checkers: this.state.player1_checkers,\n          calculateMove: this.calculateMove,\n          destroyactivechecker: this.removeActiveChecker,\n          activechecker: this.state.activechecker,\n          player2_checkers: this.state.player2_checkers,\n          player1: this.state.player1,\n          playermove: this.playerMove,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 553\n          },\n          __self: this\n        }), React.createElement(Display, {\n          playerturn: 2,\n          activechecker: this.state.activechecker,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 555\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.checkerpositions = this.initBoard();\n    console.log(this.checkerpositions[0]);\n    console.log(this.checkerpositions[1]);\n    this.state = {\n      player1: false,\n      player1_checkers: this.checkerpositions[0],\n      player2_checkers: this.checkerpositions[1],\n      activechecker: [-1, -1]\n    };\n    this.playerMove = this.playerMove.bind(this);\n    this.removeActiveChecker = this.removeActiveChecker.bind(this);\n    this.calculateMove = this.calculateMove.bind(this);\n  }\n\n  calculateMove(rowid, colid) {\n    let moves = [];\n\n    if (this.state.activechecker[0] < 0 || this.state.activechecker[1] < 0) {\n      alert(\"Active checker not set!\");\n      return false;\n    } // moves = this.determineAllowedMoves()\n\n\n    if (this.state.player1) {\n      let index = this.isItemInArray(this.state.player1_checkers, this.state.activechecker);\n\n      if (index >= 0 && this.state.player1_checkers[index].crowned) {\n        moves = this.moveForward(this.state.player1);\n        moves.push(this.moveBackward(this.state.player1));\n      } else {\n        moves = this.moveForward(this.state.player1);\n      }\n    } else if (!this.state.player1) {\n      let index = this.isItemInArray(this.state.player2_checkers, this.state.activechecker);\n\n      if (index >= 0 && this.state.player2_checkers[index].crowned) {\n        moves = this.moveForward(this.state.player1);\n        moves.push(...this.moveBackward(this.state.player1));\n      } else {\n        moves = this.moveForward(this.state.player1);\n      }\n    }\n\n    if (moves) {\n      for (var i = 0; i < moves.length; i++) {\n        if (moves[i].position[0] === rowid && moves[i].position[1] === colid) {\n          if (this.state.player1) {\n            let activeindex = this.isItemInArray(this.state.player1_checkers, this.state.activechecker); // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\n\n            this.state.player1_checkers.splice(activeindex, 1, {\n              position: moves[i].position,\n              crowned: this.state.player1_checkers[activeindex].crowned\n            });\n\n            if (moves[i].action === \"attack\") {\n              let eliminatedopponent = moves[i].opponent;\n              let index = this.isItemInArray(this.state.player2_checkers, eliminatedopponent);\n              this.state.player2_checkers.splice(index, 1);\n            } //need to check if checker has become crowned\n\n\n            if (moves[i].position[0] == 0) {\n              //we need to crown the checker\n              if (!this.state.player2_checkers[activeindex].crowned) {\n                this.state.player1_checkers[activeindex].crowned = true;\n              }\n            }\n\n            this.setState({\n              player1_checkers: this.state.player1_checkers,\n              player2_checkers: this.state.player2_checkers,\n              player1: false\n            });\n            return true;\n          } else {\n            let activeindex = this.isItemInArray(this.state.player2_checkers, this.state.activechecker); // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\n\n            this.state.player2_checkers.splice(activeindex, 1, {\n              position: moves[i].position,\n              crowned: this.state.player2_checkers[activeindex].crowned\n            });\n\n            if (moves[i].action === \"attack\") {\n              let eliminatedopponent = moves[i].opponent;\n              let index = this.isItemInArray(this.state.player1_checkers, eliminatedopponent);\n              this.state.player1_checkers.splice(index, 1);\n            } //need to check if checker has become crowned\n\n\n            if (moves[i].position[0] === 7) {\n              if (typeof this.state.player2_checkers[activeindex].crowned != \"undefined\") {\n                // this.state.player2_checkers[activeindex].crowned = true;\n                this.setState(state => {\n                  state.player2_checkers[activeindex].crowned = true;\n                }, () => {});\n              }\n            }\n\n            this.setState({\n              player1_checkers: this.state.player1_checkers,\n              player2_checkers: this.state.player2_checkers,\n              player1: true\n            });\n            return true;\n          }\n        }\n      }\n    } else {\n      return false;\n    }\n  }\n\n  determineAllowedMoves() {\n    let moves = [];\n\n    if (this.state.player1) {\n      if (this.state.activechecker[0] - 1 >= 0) {\n        let activeindex = this.isItemInArray(this.state.player1_checkers, this.state.activechecker);\n\n        if (this.state.player1_checkers[activeindex].crowned) {} else {\n          if (this.state.activechecker[1] - 1 >= 0) {\n            moves.push({\n              position: [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1],\n              action: \"move\"\n            });\n          }\n\n          if (this.state.activechecker[1] + 1 <= 7) {\n            moves.push({\n              position: [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1],\n              action: \"move\"\n            });\n          }\n\n          let removeindexes = [];\n          let itemstopush = [];\n\n          for (let i = 0; i < moves.length; i++) {\n            if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n              removeindexes.push(i);\n              let removed = moves[i];\n\n              if (this.state.activechecker[1] - 2 >= 0 && this.state.activechecker[0] - 2 >= 0) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1]) >= 0) {\n                  if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                    if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                      if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                        itemstopush.push({\n                          position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2],\n                          action: \"attack\",\n                          opponent: removed.position\n                        });\n                      }\n                    }\n                  }\n                }\n              }\n\n              if (this.state.activechecker[1] + 2 <= 7 && this.state.activechecker[0] - 2 >= 0) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1]) >= 0) {\n                  if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                    if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                      if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                        // if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                        itemstopush.push({\n                          position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2],\n                          action: \"attack\",\n                          opponent: removed.position\n                        }); // }\n                      }\n                    }\n                  }\n                }\n              }\n            } //can't stack checkers in same Tile\n            else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n                removeindexes.push(i); // if(this.state.activechecker[0] - 2 >= 0 &&  this.state.activechecker[1] + 2 <= 7){\n                //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                //         if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                //             moves.push([this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]);\n                //         }\n                //     }\n                // }\n              }\n          }\n\n          for (let i = 0; i < removeindexes.length; i++) {\n            moves.splice(removeindexes[i], 1);\n          }\n\n          for (let i = 0; i < itemstopush.length; i++) {\n            moves.push(itemstopush[i]);\n          }\n        }\n      }\n    } else {\n      if (this.state.activechecker[0] + 1 <= 7) {\n        if (this.state.activechecker[1] - 1 >= 0) {\n          moves.push({\n            position: [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1],\n            action: \"move\"\n          });\n        }\n\n        if (this.state.activechecker[1] + 1 <= 7) {\n          moves.push({\n            position: [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1],\n            action: \"move\"\n          });\n        }\n      }\n\n      let removeindexes = [];\n      let itemstopush = [];\n\n      for (let i = 0; i < moves.length; i++) {\n        if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i); //diagnolly to the left\n        } else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i);\n          let removed = moves[i];\n\n          if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] - 2 >= 0) {\n            // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\n            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1]) >= 0) {\n              if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } //determine if opponents checker is in the bottom right position\n\n\n          if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] + 2 <= 7) {\n            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1]) >= 0) {\n              if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } // moves.splice(i, 1);\n\n        }\n      }\n\n      for (let i = 0; i < removeindexes.length; i++) {\n        moves.splice(removeindexes[i], 1);\n      }\n\n      for (let i = 0; i < itemstopush.length; i++) {\n        moves.push(itemstopush[i]);\n      }\n    }\n\n    return moves;\n  }\n\n  moveBackward(player1) {\n    let moves = [];\n\n    if (player1) {\n      if (this.state.activechecker[0] + 1 <= 7) {\n        if (this.state.activechecker[1] - 1 >= 0) {\n          moves.push({\n            position: [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1],\n            action: \"move\"\n          });\n        }\n\n        if (this.state.activechecker[1] + 1 <= 7) {\n          moves.push({\n            position: [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1],\n            action: \"move\"\n          });\n        }\n      }\n\n      let removeindexes = [];\n      let itemstopush = [];\n\n      for (let i = 0; i < moves.length; i++) {\n        if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i); //diagnolly to the left\n        } else if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i);\n          let removed = moves[i];\n\n          if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] - 2 >= 0) {\n            // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\n            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1]) >= 0) {\n              if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } //determine if opponents checker is in the bottom right position\n\n\n          if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] + 2 <= 7) {\n            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1]) >= 0) {\n              if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } // moves.splice(i, 1);\n\n        }\n      }\n\n      for (let i = 0; i < removeindexes.length; i++) {\n        moves.splice(removeindexes[i], 1);\n      }\n\n      for (let i = 0; i < itemstopush.length; i++) {\n        moves.push(itemstopush[i]);\n      }\n    } else {\n      if (this.state.activechecker[0] - 1 >= 0) {\n        if (this.state.activechecker[1] - 1 >= 0) {\n          moves.push({\n            position: [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1],\n            action: \"move\"\n          });\n        }\n\n        if (this.state.activechecker[1] + 1 <= 7) {\n          moves.push({\n            position: [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1],\n            action: \"move\"\n          });\n        }\n      }\n\n      let removeindexes = [];\n      let itemstopush = [];\n\n      for (let i = 0; i < moves.length; i++) {\n        if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i); //diagnolly to the left\n        } else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n          removeindexes.push(i);\n          let removed = moves[i];\n\n          if (this.state.activechecker[0] - 2 >= 0 && this.state.activechecker[1] - 2 >= 0) {\n            // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\n            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1]) >= 0) {\n              if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } //determine if opponents checker is in the bottom right position\n\n\n          if (this.state.activechecker[0] - 2 >= 0 && this.state.activechecker[1] + 2 <= 7) {\n            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1]) >= 0) {\n              if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                  if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                    itemstopush.push({\n                      position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2],\n                      action: \"attack\",\n                      opponent: removed.position\n                    });\n                  }\n                }\n              }\n            }\n          } // moves.splice(i, 1);\n\n        }\n      }\n\n      for (let i = 0; i < removeindexes.length; i++) {\n        moves.splice(removeindexes[i], 1);\n      }\n\n      for (let i = 0; i < itemstopush.length; i++) {\n        moves.push(itemstopush[i]);\n      }\n    }\n\n    return moves;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/chanstag/Desktop/reactpractice/Exchequer/src/Game.js"],"names":["React","Board","Display","Game","Component","constructor","props","moveForward","player_turn","moves","state","activechecker","push","position","action","removeindexes","itemstopush","i","length","isItemInArray","player2_checkers","removed","player1_checkers","opponent","splice","array","item","initBoard","player1","player2","startingpositions","j","crowned","playerMove","rowid","colid","fnc","setState","removeActiveChecker","componentDidMount","componentWillUnmount","render","calculateMove","checkerpositions","console","log","bind","alert","index","moveBackward","activeindex","eliminatedopponent","determineAllowedMoves"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;;;;;;;;;;;;;;;;;;AAkBA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA0NnBC,WA1NmB,GA0NJC,WAAD,IAAe;AACzB,UAAIC,KAAK,GAAG,EAAZ;;AACA,UAAGD,WAAH,EAAe;AACX;AAEA;AACA;AACI,YAAK,KAAKE,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;;AACD,YAAI,KAAKJ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAvC,EAA0C;AACtCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;;AAED,YAAIC,aAAa,GAAG,EAApB;AACA,YAAIC,WAAW,GAAG,EAAlB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,cAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgDX,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AACzEE,YAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB;AACA,gBAAII,OAAO,GAAGZ,KAAK,CAACQ,CAAD,CAAnB;;AACA,gBAAI,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,wBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,sBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,wBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,wBAAAA,MAAM,EAAE,QAAxF;AAAkGS,wBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,uBAAjB;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,gBAAI,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,wBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtH;AACAK,sBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,wBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,wBAAAA,MAAM,EAAE,QAAxF;AAAkGS,wBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,uBAAjB,EAFsH,CAGtH;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,WA3BD,CA4BA;AA5BA,eA6BK,IAAI,KAAKM,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgDb,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AAC9EE,cAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB,EAD8E,CAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ;;AACD,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CR,UAAAA,KAAK,CAACe,MAAN,CAAaT,aAAa,CAACE,CAAD,CAA1B,EAA+B,CAA/B;AACH;;AACD,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCR,UAAAA,KAAK,CAACG,IAAN,CAAWI,WAAW,CAACC,CAAD,CAAtB;AACH;AACJ,OA7DL,CA8DJ;AA9DI,WA+DA;AACA,cAAK,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxCF,YAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,cAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,cAAAA,MAAM,EAAE;AAAxF,aAAX;AACH;;AACD,cAAI,KAAKJ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAvC,EAA0C;AACtCF,YAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,cAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,cAAAA,MAAM,EAAE;AAAxF,aAAX;AACH;;AAED,cAAIC,aAAa,GAAG,EAApB;AACA,cAAIC,WAAW,GAAG,EAAlB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,gBAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgDb,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AACzEE,cAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB;AACA,kBAAII,OAAO,GAAGZ,KAAK,CAACQ,CAAD,CAAnB;;AACA,kBAAI,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,sBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAE,CAA9H,EAAiI;AAC7H,wBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAE,CAA9H,EAAiI;AAC7H,0BAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,wBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,0BAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,0BAAAA,MAAM,EAAE,QAAxF;AAAkGS,0BAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,yBAAjB;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,kBAAI,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,sBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,wBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,0BAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtH;AACAK,wBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,0BAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,0BAAAA,MAAM,EAAE,QAAxF;AAAkGS,0BAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,yBAAjB,EAFsH,CAGtH;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,aA3BD,CA4BA;AA5BA,iBA6BK,IAAI,KAAKM,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgDX,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AAC9EE,gBAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB,EAD8E,CAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ;;AACD,eAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CR,YAAAA,KAAK,CAACe,MAAN,CAAaT,aAAa,CAACE,CAAD,CAA1B,EAA+B,CAA/B;AACH;;AACD,eAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCR,YAAAA,KAAK,CAACG,IAAN,CAAWI,WAAW,CAACC,CAAD,CAAtB;AACH;AACJ;;AACD,aAAOR,KAAP;AAEC,KAvVkB;;AAAA,SAidnBU,aAjdmB,GAidH,CAACM,KAAD,EAAQC,IAAR,KAAe;AAC3B,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC;AACA;AACA,YAAG,OAAOQ,KAAK,CAACR,CAAD,CAAL,CAASJ,QAAhB,IAA6B,WAAhC,EAA4C;AACxC,cAAGY,KAAK,CAACR,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,KAAwBa,IAAI,CAAC,CAAD,CAA5B,IAAmCD,KAAK,CAACR,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,KAAwBa,IAAI,CAAC,CAAD,CAAlE,EAAsE;AAClE,mBAAOT,CAAP;AACH;AACJ,SAJD,MAKK,IAAIQ,KAAK,CAACR,CAAD,CAAL,CAAS,CAAT,KAAeS,IAAI,CAAC,CAAD,CAAnB,IAA0BD,KAAK,CAACR,CAAD,CAAL,CAAS,CAAT,KAAeS,IAAI,CAAC,CAAD,CAAjD,EAAsD;AACvD,iBAAOT,CAAP,CADuD,CAC3C;AACf;AAEJ;;AACD,aAAO,CAAC,CAAR,CAd2B,CAcd;AAChB,KAhekB;;AAAA,SAkenBU,SAlemB,GAkeP,MAAI;AACZ,UAAIC,OAAO,GAAC,EAAZ;AACA,UAAIC,OAAO,GAAC,EAAZ;AACA,UAAIC,iBAAiB,GAAG,EAAxB;;AACA,WAAI,IAAIb,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACvB,aAAI,IAAIc,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtBH,UAAAA,OAAO,CAAChB,IAAR,CAAa;AAACC,YAAAA,QAAQ,EAAE,CAACI,CAAC,GAAC,CAAH,EAAKc,CAAL,CAAX;AAAoBC,YAAAA,OAAO,EAAE;AAA7B,WAAb;AACAH,UAAAA,OAAO,CAACjB,IAAR,CAAa;AAACC,YAAAA,QAAQ,EAAE,CAACI,CAAD,EAAIc,CAAJ,CAAX;AAAmBC,YAAAA,OAAO,EAAE;AAA5B,WAAb;AACH;AACJ;;AACDF,MAAAA,iBAAiB,CAAClB,IAAlB,CAAuBgB,OAAvB;AACAE,MAAAA,iBAAiB,CAAClB,IAAlB,CAAuBiB,OAAvB;AACA,aAAOC,iBAAP;AACH,KA/ekB;;AAAA,SAifnBG,UAjfmB,GAifN,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,KAAqB;AAC9B;AACA,WAAKC,QAAL,CAAc3B,KAAK,KAAK;AACpB;AACAC,QAAAA,aAAa,EAAE,CAACuB,KAAD,EAAQC,KAAR;AAFK,OAAL,CAAnB,EAGMC,GAHN;AAIH,KAvfkB;;AAAA,SAyfnBE,mBAzfmB,GAyfG,MAAI;AACtB,WAAKD,QAAL,CAAc;AAAC1B,QAAAA,aAAa,EAAE,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN;AAAhB,OAAd;AACH,KA3fkB;;AAAA,SA6fnB4B,iBA7fmB,GA6fC,MAAI,CACvB,CA9fkB;;AAAA,SAggBlBC,oBAhgBkB,GAggBK,MAAI,CAC3B,CAjgBkB;;AAAA,SAogBlBC,MApgBkB,GAogBT,MAAK;AACV,UAAG,KAAK/B,KAAL,CAAWkB,OAAX,IAAsB,IAAzB,EAA8B;AAC3B,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,KAAD;AAAO,UAAA,gBAAgB,EAAE,KAAKlB,KAAL,CAAWY,gBAApC;AAAsD,UAAA,aAAa,EAAE,KAAKoB,aAA1E;AAAyF,UAAA,oBAAoB,EAAE,KAAKJ,mBAApH;AAAyI,UAAA,aAAa,EAAE,KAAK5B,KAAL,CAAWC,aAAnK;AAAkL,UAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWU,gBAA/M;AAAiO,UAAA,OAAO,EAAE,KAAKV,KAAL,CAAWkB,OAArP;AAA8P,UAAA,UAAU,EAAE,KAAKK,UAA/Q;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAGA,oBAAC,OAAD;AAAS,UAAA,UAAU,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHA,CADJ;AAOF,OARD,MASI;AACD,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,KAAD;AAAO,UAAA,gBAAgB,EAAE,KAAKvB,KAAL,CAAWY,gBAApC;AAAuD,UAAA,aAAa,EAAE,KAAKoB,aAA3E;AAA0F,UAAA,oBAAoB,EAAE,KAAKJ,mBAArH;AAA0I,UAAA,aAAa,EAAE,KAAK5B,KAAL,CAAWC,aAApK;AAAmL,UAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWU,gBAAhN;AAAkO,UAAA,OAAO,EAAE,KAAKV,KAAL,CAAWkB,OAAtP;AAA+P,UAAA,UAAU,EAAE,KAAKK,UAAhR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAGA,oBAAC,OAAD;AAAS,UAAA,UAAU,EAAE,CAArB;AAAwB,UAAA,aAAa,EAAE,KAAKvB,KAAL,CAAWC,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHA,CADJ;AAOF;AAEJ,KAxhBiB;;AAEjB,SAAKgC,gBAAL,GAAwB,KAAKhB,SAAL,EAAxB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,gBAAL,CAAsB,CAAtB,CAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,gBAAL,CAAsB,CAAtB,CAAZ;AACA,SAAKjC,KAAL,GAAa;AAACkB,MAAAA,OAAO,EAAE,KAAV;AAAiBN,MAAAA,gBAAgB,EAAE,KAAKqB,gBAAL,CAAsB,CAAtB,CAAnC;AAA6DvB,MAAAA,gBAAgB,EAAE,KAAKuB,gBAAL,CAAsB,CAAtB,CAA/E;AAAyGhC,MAAAA,aAAa,EAAE,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL;AAAxH,KAAb;AACF,SAAKsB,UAAL,GAAkB,KAAKA,UAAL,CAAgBa,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKR,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBQ,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKJ,aAAL,GAAqB,KAAKA,aAAL,CAAmBI,IAAnB,CAAwB,IAAxB,CAArB;AACC;;AAEDJ,EAAAA,aAAa,CAACR,KAAD,EAAQC,KAAR,EAAc;AACvB,QAAI1B,KAAK,GAAG,EAAZ;;AACA,QAAG,KAAKC,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAApE,EACA;AACIoC,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACA,aAAO,KAAP;AACH,KANsB,CAOvB;;;AACA,QAAG,KAAKrC,KAAL,CAAWkB,OAAd,EAAsB;AAClB,UAAIoB,KAAK,GAAG,KAAK7B,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,KAAKZ,KAAL,CAAWC,aAA3D,CAAZ;;AACA,UAAGqC,KAAK,IAAI,CAAT,IAAc,KAAKtC,KAAL,CAAWY,gBAAX,CAA4B0B,KAA5B,EAAmChB,OAApD,EAA4D;AACxDvB,QAAAA,KAAK,GAAG,KAAKF,WAAL,CAAiB,KAAKG,KAAL,CAAWkB,OAA5B,CAAR;AACAnB,QAAAA,KAAK,CAACG,IAAN,CAAW,KAAKqC,YAAL,CAAkB,KAAKvC,KAAL,CAAWkB,OAA7B,CAAX;AACH,OAHD,MAII;AACAnB,QAAAA,KAAK,GAAG,KAAKF,WAAL,CAAiB,KAAKG,KAAL,CAAWkB,OAA5B,CAAR;AACH;AACJ,KATD,MAUK,IAAG,CAAC,KAAKlB,KAAL,CAAWkB,OAAf,EAAuB;AACxB,UAAIoB,KAAK,GAAG,KAAK7B,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,KAAKV,KAAL,CAAWC,aAA3D,CAAZ;;AACA,UAAGqC,KAAK,IAAI,CAAT,IAAc,KAAKtC,KAAL,CAAWU,gBAAX,CAA4B4B,KAA5B,EAAmChB,OAApD,EAA4D;AACxDvB,QAAAA,KAAK,GAAG,KAAKF,WAAL,CAAiB,KAAKG,KAAL,CAAWkB,OAA5B,CAAR;AACAnB,QAAAA,KAAK,CAACG,IAAN,CAAW,GAAG,KAAKqC,YAAL,CAAkB,KAAKvC,KAAL,CAAWkB,OAA7B,CAAd;AACH,OAHD,MAII;AACAnB,QAAAA,KAAK,GAAG,KAAKF,WAAL,CAAiB,KAAKG,KAAL,CAAWkB,OAA5B,CAAR;AACH;AACJ;;AAED,QAAGnB,KAAH,EAAS;AACL,WAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,KAAK,CAACS,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACjC,YAAGR,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyBqB,KAAzB,IAAkCzB,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyBsB,KAA9D,EAAoE;AAChE,cAAG,KAAKzB,KAAL,CAAWkB,OAAd,EAAsB;AAClB,gBAAIsB,WAAW,GAAG,KAAK/B,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,KAAKZ,KAAL,CAAWC,aAA3D,CAAlB,CADkB,CAElB;;AACA,iBAAKD,KAAL,CAAWY,gBAAX,CAA4BE,MAA5B,CAAmC0B,WAAnC,EAAgD,CAAhD,EAAmD;AAACrC,cAAAA,QAAQ,EAAEJ,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAApB;AAA8BmB,cAAAA,OAAO,EAAG,KAAKtB,KAAL,CAAWY,gBAAX,CAA4B4B,WAA5B,EAAyClB;AAAjF,aAAnD;;AACA,gBAAGvB,KAAK,CAACQ,CAAD,CAAL,CAASH,MAAT,KAAoB,QAAvB,EAAgC;AAC5B,kBAAIqC,kBAAkB,GAAG1C,KAAK,CAACQ,CAAD,CAAL,CAASM,QAAlC;AACA,kBAAIyB,KAAK,GAAG,KAAK7B,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD+B,kBAAhD,CAAZ;AACA,mBAAKzC,KAAL,CAAWU,gBAAX,CAA4BI,MAA5B,CAAmCwB,KAAnC,EAA0C,CAA1C;AACH,aARiB,CASlB;;;AACA,gBAAGvC,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AACzB;AACA,kBAAG,CAAC,KAAKH,KAAL,CAAWU,gBAAX,CAA4B8B,WAA5B,EAAyClB,OAA7C,EAAqD;AACjD,qBAAKtB,KAAL,CAAWY,gBAAX,CAA4B4B,WAA5B,EAAyClB,OAAzC,GAAmD,IAAnD;AACH;AACJ;;AACD,iBAAKK,QAAL,CAAc;AAACf,cAAAA,gBAAgB,EAAE,KAAKZ,KAAL,CAAWY,gBAA9B;AAAgDF,cAAAA,gBAAgB,EAAE,KAAKV,KAAL,CAAWU,gBAA7E;AAA+FQ,cAAAA,OAAO,EAAE;AAAxG,aAAd;AACA,mBAAO,IAAP;AACH,WAlBD,MAmBI;AACA,gBAAIsB,WAAW,GAAG,KAAK/B,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,KAAKV,KAAL,CAAWC,aAA3D,CAAlB,CADA,CAEA;;AACA,iBAAKD,KAAL,CAAWU,gBAAX,CAA4BI,MAA5B,CAAmC0B,WAAnC,EAAgD,CAAhD,EAAmD;AAACrC,cAAAA,QAAQ,EAAEJ,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAApB;AAA8BmB,cAAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWU,gBAAX,CAA4B8B,WAA5B,EAAyClB;AAAhF,aAAnD;;AACA,gBAAGvB,KAAK,CAACQ,CAAD,CAAL,CAASH,MAAT,KAAoB,QAAvB,EAAgC;AAC5B,kBAAIqC,kBAAkB,GAAG1C,KAAK,CAACQ,CAAD,CAAL,CAASM,QAAlC;AACA,kBAAIyB,KAAK,GAAG,KAAK7B,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD6B,kBAAhD,CAAZ;AACA,mBAAKzC,KAAL,CAAWY,gBAAX,CAA4BE,MAA5B,CAAmCwB,KAAnC,EAA0C,CAA1C;AACH,aARD,CASA;;;AACA,gBAAGvC,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAA0B,CAA7B,EAA+B;AAC3B,kBAAG,OAAO,KAAKH,KAAL,CAAWU,gBAAX,CAA4B8B,WAA5B,EAAyClB,OAAhD,IAA4D,WAA/D,EAA2E;AACvE;AACA,qBAAKK,QAAL,CAAc3B,KAAK,IAAI;AAACA,kBAAAA,KAAK,CAACU,gBAAN,CAAuB8B,WAAvB,EAAoClB,OAApC,GAA8C,IAA9C;AAAoD,iBAA5E,EAA8E,MAAI,CAAE,CAApF;AACH;AAEJ;;AACD,iBAAKK,QAAL,CAAc;AAACf,cAAAA,gBAAgB,EAAE,KAAKZ,KAAL,CAAWY,gBAA9B;AAAgDF,cAAAA,gBAAgB,EAAE,KAAKV,KAAL,CAAWU,gBAA7E;AAA+FQ,cAAAA,OAAO,EAAE;AAAxG,aAAd;AACA,mBAAO,IAAP;AACH;AACJ;AACJ;AACJ,KA5CD,MA6CI;AACA,aAAO,KAAP;AACH;AACR;;AAEGwB,EAAAA,qBAAqB,GAAE;AACnB,QAAI3C,KAAK,GAAG,EAAZ;;AACA,QAAI,KAAKC,KAAL,CAAWkB,OAAf,EAAwB;AACpB,UAAK,KAAKlB,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxC,YAAIuC,WAAW,GAAG,KAAK/B,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,KAAKZ,KAAL,CAAWC,aAA3D,CAAlB;;AACA,YAAI,KAAKD,KAAL,CAAWY,gBAAX,CAA4B4B,WAA5B,EAAyClB,OAA7C,EAAsD,CAErD,CAFD,MAGK;AACD,cAAK,KAAKtB,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxCF,YAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,cAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,cAAAA,MAAM,EAAE;AAAxF,aAAX;AACH;;AACD,cAAI,KAAKJ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAvC,EAA0C;AACtCF,YAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,cAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,cAAAA,MAAM,EAAE;AAAxF,aAAX;AACH;;AAED,cAAIC,aAAa,GAAG,EAApB;AACA,cAAIC,WAAW,GAAG,EAAlB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,gBAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgDX,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AACzEE,cAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB;AACA,kBAAII,OAAO,GAAGZ,KAAK,CAACQ,CAAD,CAAnB;;AACA,kBAAI,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,sBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,wBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,0BAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,wBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,0BAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,0BAAAA,MAAM,EAAE,QAAxF;AAAkGS,0BAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,yBAAjB;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,kBAAI,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,sBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,wBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,0BAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtH;AACAK,wBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,0BAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,0BAAAA,MAAM,EAAE,QAAxF;AAAkGS,0BAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,yBAAjB,EAFsH,CAGtH;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,aA3BD,CA4BA;AA5BA,iBA6BK,IAAI,KAAKM,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgDb,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AAC9EE,gBAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB,EAD8E,CAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ;;AACD,eAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CR,YAAAA,KAAK,CAACe,MAAN,CAAaT,aAAa,CAACE,CAAD,CAA1B,EAA+B,CAA/B;AACH;;AACD,eAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCR,YAAAA,KAAK,CAACG,IAAN,CAAWI,WAAW,CAACC,CAAD,CAAtB;AACH;AACJ;AACJ;AACJ,KAjED,MAkEK;AACD,UAAK,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxC,YAAK,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;;AACD,YAAI,KAAKJ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAvC,EAA0C;AACtCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;AACJ;;AACD,UAAIC,aAAa,GAAG,EAApB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgDX,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AACzEE,UAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB,EADyE,CAEzE;AACH,SAHD,MAIK,IAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgDb,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AAC9EE,UAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB;AACA,cAAII,OAAO,GAAGZ,KAAK,CAACQ,CAAD,CAAnB;;AACA,cAAI,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E;AACA,gBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,oBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,sBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,sBAAAA,MAAM,EAAE,QAAxF;AAAkGS,sBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,qBAAjB;AACH;AACJ;AACJ;AACJ;AACJ,WAd6E,CAgB9E;;;AACA,cAAI,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,gBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,oBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,sBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,sBAAAA,MAAM,EAAE,QAAxF;AAAkGS,sBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,qBAAjB;AACH;AACJ;AACJ;AACJ;AACJ,WA3B6E,CA4B9E;;AACH;AAEJ;;AAED,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CR,QAAAA,KAAK,CAACe,MAAN,CAAaT,aAAa,CAACE,CAAD,CAA1B,EAA+B,CAA/B;AACH;;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCR,QAAAA,KAAK,CAACG,IAAN,CAAWI,WAAW,CAACC,CAAD,CAAtB;AACH;AAEJ;;AACD,WAAOR,KAAP;AACH;;AAiIDwC,EAAAA,YAAY,CAACrB,OAAD,EAAS;AACjB,QAAInB,KAAK,GAAG,EAAZ;;AACA,QAAGmB,OAAH,EAAW;AACP,UAAK,KAAKlB,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxC,YAAK,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;;AACD,YAAI,KAAKJ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAvC,EAA0C;AACtCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;AACJ;;AACD,UAAIC,aAAa,GAAG,EAApB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgDb,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AACzEE,UAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB,EADyE,CAEzE;AACH,SAHD,MAIK,IAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgDX,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AAC9EE,UAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB;AACA,cAAII,OAAO,GAAGZ,KAAK,CAACQ,CAAD,CAAnB;;AACA,cAAI,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E;AACA,gBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,oBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,sBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,sBAAAA,MAAM,EAAE,QAAxF;AAAkGS,sBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,qBAAjB;AACH;AACJ;AACJ;AACJ;AACJ,WAd6E,CAgB9E;;;AACA,cAAI,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,gBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,oBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,sBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,sBAAAA,MAAM,EAAE,QAAxF;AAAkGS,sBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,qBAAjB;AACH;AACJ;AACJ;AACJ;AACJ,WA3B6E,CA4B9E;;AACH;AAEJ;;AAED,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CR,QAAAA,KAAK,CAACe,MAAN,CAAaT,aAAa,CAACE,CAAD,CAA1B,EAA+B,CAA/B;AACH;;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCR,QAAAA,KAAK,CAACG,IAAN,CAAWI,WAAW,CAACC,CAAD,CAAtB;AACH;AACJ,KAvDD,MAwDI;AACA,UAAK,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxC,YAAK,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;;AACD,YAAI,KAAKJ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAvC,EAA0C;AACtCF,UAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,YAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,YAAAA,MAAM,EAAE;AAAxF,WAAX;AACH;AACJ;;AACD,UAAIC,aAAa,GAAG,EAApB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgDX,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AACzEE,UAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB,EADyE,CAEzE;AACH,SAHD,MAIK,IAAI,KAAKE,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgDb,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAzD,KAAsE,CAA1E,EAA6E;AAC9EE,UAAAA,aAAa,CAACH,IAAd,CAAmBK,CAAnB;AACA,cAAII,OAAO,GAAGZ,KAAK,CAACQ,CAAD,CAAnB;;AACA,cAAI,KAAKP,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAoC,CAApC,IAAyC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAhF,EAAmF;AAC/E;AACA,gBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,oBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,sBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,sBAAAA,MAAM,EAAE,QAAxF;AAAkGS,sBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,qBAAjB;AACH;AACJ;AACJ;AACJ;AACJ,WAd6E,CAgB9E;;;AACA,cAAI,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAAnC,IAAwC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA9B,IAAmC,CAA/E,EAAkF;AAC9E,gBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,KAAuH,CAA3H,EAA8H;AAC1H,kBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWY,gBAA9B,EAAgD,CAAC,KAAKZ,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,oBAAI,KAAKQ,aAAL,CAAmB,KAAKT,KAAL,CAAWU,gBAA9B,EAAgD,CAAC,KAAKV,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAhD,MAAwH,CAAC,CAA7H,EAAgI;AAC5H,sBAAIF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvD,IAA4DF,KAAK,CAACQ,CAAD,CAAL,CAASJ,QAAT,CAAkB,CAAlB,MAAyB,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAvH,EAA0H;AACtHK,oBAAAA,WAAW,CAACJ,IAAZ,CAAiB;AAAEC,sBAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAA/B,EAAkC,KAAKD,KAAL,CAAWC,aAAX,CAAyB,CAAzB,IAA8B,CAAhE,CAAZ;AAAgFG,sBAAAA,MAAM,EAAE,QAAxF;AAAkGS,sBAAAA,QAAQ,EAAEF,OAAO,CAACR;AAApH,qBAAjB;AACH;AACJ;AACJ;AACJ;AACJ,WA3B6E,CA4B9E;;AACH;AAEJ;;AAED,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CR,QAAAA,KAAK,CAACe,MAAN,CAAaT,aAAa,CAACE,CAAD,CAA1B,EAA+B,CAA/B;AACH;;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCR,QAAAA,KAAK,CAACG,IAAN,CAAWI,WAAW,CAACC,CAAD,CAAtB;AACH;AAEJ;;AACD,WAAOR,KAAP;AAEH;;AA/c8B;;AA4hBjC,eAAeN,IAAf","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport Display from './Display'\n\n/*\n\nLogic considerations\n\nInitially creating the checker positions and passing them down to components\n\nDeleting checkers once they're eliminated from the game\n\nimplementing possible moves for the checkers\n\ncheckers cannot occupy the same space\n\ncheckers must remain within the dimensions of the board\n\nneed to implement uprgading of checkers\n\n**/\n\nclass Game extends React.Component {\n    constructor(props) {\n      super(props);\n      this.checkerpositions = this.initBoard();\n      console.log(this.checkerpositions[0]);\n      console.log(this.checkerpositions[1]);\n      this.state = {player1: false, player1_checkers: this.checkerpositions[0], player2_checkers: this.checkerpositions[1], activechecker: [-1,-1]};\n    this.playerMove = this.playerMove.bind(this);\n    this.removeActiveChecker = this.removeActiveChecker.bind(this);\n    this.calculateMove = this.calculateMove.bind(this);\n    }\n\n    calculateMove(rowid, colid){\n        let moves = [];\n        if(this.state.activechecker[0] < 0 || this.state.activechecker[1] < 0)\n        {\n            alert(\"Active checker not set!\");\n            return false;\n        }\n        // moves = this.determineAllowedMoves()\n        if(this.state.player1){\n            let index = this.isItemInArray(this.state.player1_checkers, this.state.activechecker)\n            if(index >= 0 && this.state.player1_checkers[index].crowned){\n                moves = this.moveForward(this.state.player1)\n                moves.push(this.moveBackward(this.state.player1))\n            }\n            else{\n                moves = this.moveForward(this.state.player1)\n            }\n        }\n        else if(!this.state.player1){\n            let index = this.isItemInArray(this.state.player2_checkers, this.state.activechecker)\n            if(index >= 0 && this.state.player2_checkers[index].crowned){\n                moves = this.moveForward(this.state.player1)\n                moves.push(...this.moveBackward(this.state.player1))\n            }\n            else{\n                moves = this.moveForward(this.state.player1)\n            }\n        }\n        \n        if(moves){\n            for(var i = 0; i < moves.length; i++){\n                if(moves[i].position[0] === rowid && moves[i].position[1] === colid){\n                    if(this.state.player1){\n                        let activeindex = this.isItemInArray(this.state.player1_checkers, this.state.activechecker);\n                        // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\n                        this.state.player1_checkers.splice(activeindex, 1, {position: moves[i].position, crowned:  this.state.player1_checkers[activeindex].crowned});\n                        if(moves[i].action === \"attack\"){\n                            let eliminatedopponent = moves[i].opponent;\n                            let index = this.isItemInArray(this.state.player2_checkers, eliminatedopponent);\n                            this.state.player2_checkers.splice(index, 1);\n                        }\n                        //need to check if checker has become crowned\n                        if(moves[i].position[0] == 0){\n                            //we need to crown the checker\n                            if(!this.state.player2_checkers[activeindex].crowned){\n                                this.state.player1_checkers[activeindex].crowned = true;\n                            }\n                        }\n                        this.setState({player1_checkers: this.state.player1_checkers, player2_checkers: this.state.player2_checkers, player1: false})\n                        return true;\n                    }\n                    else{\n                        let activeindex = this.isItemInArray(this.state.player2_checkers, this.state.activechecker);\n                        // let moveindex = this.isItemInArray(moves[i].position, [rowid, colid]);\n                        this.state.player2_checkers.splice(activeindex, 1, {position: moves[i].position, crowned: this.state.player2_checkers[activeindex].crowned});\n                        if(moves[i].action === \"attack\"){\n                            let eliminatedopponent = moves[i].opponent;\n                            let index = this.isItemInArray(this.state.player1_checkers, eliminatedopponent);\n                            this.state.player1_checkers.splice(index, 1);\n                        }\n                        //need to check if checker has become crowned\n                        if(moves[i].position[0]  === 7){\n                            if(typeof(this.state.player2_checkers[activeindex].crowned) != \"undefined\"){\n                                // this.state.player2_checkers[activeindex].crowned = true;\n                                this.setState(state => {state.player2_checkers[activeindex].crowned = true;}, ()=>{});\n                            }\n                           \n                        }\n                        this.setState({player1_checkers: this.state.player1_checkers, player2_checkers: this.state.player2_checkers, player1: true})\n                        return true;\n                    }\n                }\n            }\n        }\n        else{\n            return false;\n        }\n}\n\n    determineAllowedMoves(){\n        let moves = [];\n        if (this.state.player1) {\n            if ((this.state.activechecker[0] - 1) >= 0) {\n                let activeindex = this.isItemInArray(this.state.player1_checkers, this.state.activechecker);\n                if (this.state.player1_checkers[activeindex].crowned) {\n\n                }\n                else {\n                    if ((this.state.activechecker[1] - 1) >= 0) {\n                        moves.push({ position: [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1], action: \"move\" });\n                    }\n                    if (this.state.activechecker[1] + 1 <= 7) {\n                        moves.push({ position: [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1], action: \"move\" });\n                    }\n\n                    let removeindexes = [];\n                    let itemstopush = [];\n                    for (let i = 0; i < moves.length; i++) {\n                        if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n                            removeindexes.push(i);\n                            let removed = moves[i];\n                            if (this.state.activechecker[1] - 2 >= 0 && this.state.activechecker[0] - 2 >= 0) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1]) >= 0) {\n                                    if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                                            if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                                                itemstopush.push({ position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position })\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            if (this.state.activechecker[1] + 2 <= 7 && this.state.activechecker[0] - 2 >= 0) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1]) >= 0) {\n                                    if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                                            if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                                                // if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                                                itemstopush.push({ position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position });\n                                                // }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        //can't stack checkers in same Tile\n                        else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n                            removeindexes.push(i);\n                            // if(this.state.activechecker[0] - 2 >= 0 &&  this.state.activechecker[1] + 2 <= 7){\n                            //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                            //         if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                            //             moves.push([this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]);\n                            //         }\n                            //     }\n                            // }\n                        }\n                    }\n                    for (let i = 0; i < removeindexes.length; i++) {\n                        moves.splice(removeindexes[i], 1);\n                    }\n                    for (let i = 0; i < itemstopush.length; i++) {\n                        moves.push(itemstopush[i]);\n                    }\n                }\n            }\n        }\n        else {\n            if ((this.state.activechecker[0] + 1) <= 7) {\n                if ((this.state.activechecker[1] - 1) >= 0) {\n                    moves.push({ position: [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1], action: \"move\" });\n                }\n                if (this.state.activechecker[1] + 1 <= 7) {\n                    moves.push({ position: [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1], action: \"move\" });\n                }\n            }\n            let removeindexes = [];\n            let itemstopush = [];\n            for (let i = 0; i < moves.length; i++) {\n                if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n                    removeindexes.push(i)\n                    //diagnolly to the left\n                }\n                else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n                    removeindexes.push(i)\n                    let removed = moves[i]\n                    if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] - 2 >= 0) {\n                        // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\n                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1]) >= 0) {\n                            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                                    if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                                        itemstopush.push({ position: [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position });\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    //determine if opponents checker is in the bottom right position\n                    if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] + 2 <= 7) {\n                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1]) >= 0) {\n                            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                                    if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                                        itemstopush.push({ position: [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // moves.splice(i, 1);\n                }\n\n            }\n\n            for (let i = 0; i < removeindexes.length; i++) {\n                moves.splice(removeindexes[i], 1);\n            }\n            for (let i = 0; i < itemstopush.length; i++) {\n                moves.push(itemstopush[i]);\n            }\n\n        }\n        return moves;\n    }\n\n    moveForward = (player_turn)=>{\n        let moves = [];\n        if(player_turn){ \n            // if(this.state.activechecker.crowned){\n\n            // }\n            // else{\n                if ((this.state.activechecker[1] - 1) >= 0) {\n                    moves.push({ position: [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1], action: \"move\" });\n                }\n                if (this.state.activechecker[1] + 1 <= 7) {\n                    moves.push({ position: [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1], action: \"move\" });\n                }\n        \n                let removeindexes = [];\n                let itemstopush = [];\n                for (let i = 0; i < moves.length; i++) {\n                    if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n                        removeindexes.push(i);\n                        let removed = moves[i];\n                        if (this.state.activechecker[1] - 2 >= 0 && this.state.activechecker[0] - 2 >= 0) {\n                            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1]) >= 0) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                                    if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                                        if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                                            itemstopush.push({ position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position })\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (this.state.activechecker[1] + 2 <= 7 && this.state.activechecker[0] - 2 >= 0) {\n                            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1]) >= 0) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                                    if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                                        if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                                            // if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                                            itemstopush.push({ position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position });\n                                            // }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    //can't stack checkers in same Tile\n                    else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n                        removeindexes.push(i);\n                        // if(this.state.activechecker.position[0] - 2 >= 0 &&  this.state.activechecker.position[1] + 2 <= 7){\n                        //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n                        //         if(this.isItemInArray(this.state.player1_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n                        //             moves.push([this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] - 2]);\n                        //         }\n                        //     }\n                        // }\n                    }\n                }\n                for (let i = 0; i < removeindexes.length; i++) {\n                    moves.splice(removeindexes[i], 1);\n                }\n                for (let i = 0; i < itemstopush.length; i++) {\n                    moves.push(itemstopush[i]);\n                }\n            }\n    // }\n    else{\n        if ((this.state.activechecker[1] - 1) >= 0) {\n            moves.push({ position: [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1], action: \"move\" });\n        }\n        if (this.state.activechecker[1] + 1 <= 7) {\n            moves.push({ position: [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1], action: \"move\" });\n        }\n\n        let removeindexes = [];\n        let itemstopush = [];\n        for (let i = 0; i < moves.length; i++) {\n            if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n                removeindexes.push(i);\n                let removed = moves[i];\n                if (this.state.activechecker[1] + 2 <= 7 && this.state.activechecker[0] + 2 <= 7) {\n                    if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1]) >= 0) {\n                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === - 1) {\n                            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === - 1) {\n                                if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                                    itemstopush.push({ position: [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position })\n                                }\n                            }\n                        }\n                    }\n                }\n                if (this.state.activechecker[1] - 2 >= 0 && this.state.activechecker[0] + 2 <= 7) {\n                    if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1]) >= 0) {\n                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                                if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                                    // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2 ]) === -1){\n                                    itemstopush.push({ position: [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position });\n                                    // }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            //can't stack checkers in same Tile\n            else if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n                removeindexes.push(i);\n                // if(this.state.activechecker.position[0] - 2 >= 0 &&  this.state.activechecker.position[1] + 2 <= 7){\n                //     if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n                //         if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] + 2 ]) === -1){\n                //             moves.push([this.state.activechecker.position[0] - 2, this.state.activechecker.position[1] - 2]);\n                //         }\n                //     }\n                // }\n            }\n        }\n        for (let i = 0; i < removeindexes.length; i++) {\n            moves.splice(removeindexes[i], 1);\n        }\n        for (let i = 0; i < itemstopush.length; i++) {\n            moves.push(itemstopush[i]);\n        }\n    }\n    return moves;\n        \n    }\n\n    moveBackward(player1){\n        let moves = [];\n        if(player1){\n            if ((this.state.activechecker[0] + 1) <= 7) {\n                if ((this.state.activechecker[1] - 1) >= 0) {\n                    moves.push({ position: [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1], action: \"move\" });\n                }\n                if (this.state.activechecker[1] + 1 <= 7) {\n                    moves.push({ position: [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1], action: \"move\" });\n                }\n            }\n            let removeindexes = [];\n            let itemstopush = [];\n            for (let i = 0; i < moves.length; i++) {\n                if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n                    removeindexes.push(i)\n                    //diagnolly to the left\n                }\n                else if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n                    removeindexes.push(i)\n                    let removed = moves[i]\n                    if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] - 2 >= 0) {\n                        // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\n                        if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] - 1]) >= 0) {\n                            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2]) === -1) {\n                                    if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                                        itemstopush.push({ position: [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position });\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    //determine if opponents checker is in the bottom right position\n                    if (this.state.activechecker[0] + 2 <= 7 && this.state.activechecker[1] + 2 <= 7) {\n                        if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 1, this.state.activechecker[1] + 1]) >= 0) {\n                            if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                                if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2]) === -1) {\n                                    if (moves[i].position[0] !== this.state.activechecker[0] + 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                                        itemstopush.push({ position: [this.state.activechecker[0] + 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // moves.splice(i, 1);\n                }\n\n            }\n\n            for (let i = 0; i < removeindexes.length; i++) {\n                moves.splice(removeindexes[i], 1);\n            }\n            for (let i = 0; i < itemstopush.length; i++) {\n                moves.push(itemstopush[i]);\n            }\n        }\n        else{\n            if ((this.state.activechecker[0] - 1) >= 0) {\n                if ((this.state.activechecker[1] - 1) >= 0) {\n                    moves.push({ position: [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1], action: \"move\" });\n                }\n                if (this.state.activechecker[1] + 1 <= 7) {\n                    moves.push({ position: [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1], action: \"move\" });\n                }\n            }\n            let removeindexes = [];\n            let itemstopush = [];\n            for (let i = 0; i < moves.length; i++) {\n                if (this.isItemInArray(this.state.player2_checkers, moves[i].position) >= 0) {\n                    removeindexes.push(i)\n                    //diagnolly to the left\n                }\n                else if (this.isItemInArray(this.state.player1_checkers, moves[i].position) >= 0) {\n                    removeindexes.push(i)\n                    let removed = moves[i]\n                    if (this.state.activechecker[0] - 2 >=  0 && this.state.activechecker[1] - 2 >= 0) {\n                        // if(this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] + 2, this.state.activechecker[1] - 2 ]) === -1){\n                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] - 1]) >= 0) {\n                            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2]) === -1) {\n                                    if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] - 2) {\n                                        itemstopush.push({ position: [this.state.activechecker[0] - 2, this.state.activechecker[1] - 2], action: \"attack\", opponent: removed.position });\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    //determine if opponents checker is in the bottom right position\n                    if (this.state.activechecker[0] - 2 >= 0 && this.state.activechecker[1] + 2 <= 7) {\n                        if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 1, this.state.activechecker[1] + 1]) >= 0) {\n                            if (this.isItemInArray(this.state.player1_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                                if (this.isItemInArray(this.state.player2_checkers, [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2]) === -1) {\n                                    if (moves[i].position[0] !== this.state.activechecker[0] - 2 && moves[i].position[1] !== this.state.activechecker[1] + 2) {\n                                        itemstopush.push({ position: [this.state.activechecker[0] - 2, this.state.activechecker[1] + 2], action: \"attack\", opponent: removed.position });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // moves.splice(i, 1);\n                }\n\n            }\n\n            for (let i = 0; i < removeindexes.length; i++) {\n                moves.splice(removeindexes[i], 1);\n            }\n            for (let i = 0; i < itemstopush.length; i++) {\n                moves.push(itemstopush[i]);\n            }\n\n        }\n        return moves\n        \n    }\n    \n\n    isItemInArray = (array, item)=>{\n        for (var i = 0; i < array.length; i++) {\n            // This if statement depends on the format of your array\n            //changing this to be compatible with code in determineAllowedMoves\n            if(typeof(array[i].position) != \"undefined\"){\n                if(array[i].position[0] == item[0] && array[i].position[1] == item[1]){\n                    return i;\n                }\n            }\n            else if (array[i][0] == item[0] && array[i][1] == item[1]) {\n                return i;   // Found it\n            }\n\n        }\n        return -1;   // Not found\n    }\n\n    initBoard = ()=>{\n        let player1=[];\n        let player2=[];\n        let startingpositions = []\n        for(let i = 0 ; i < 2; i++){\n            for(let j = 0; j < 8; j++){\n                player1.push({position: [i+6,j], crowned: false});\n                player2.push({position: [i, j], crowned: false});\n            }\n        }\n        startingpositions.push(player1);\n        startingpositions.push(player2);\n        return startingpositions;\n    }\n\n    playerMove = (rowid, colid, fnc)=>{\n        // alert(\"Player Move!\");\n        this.setState(state => ({\n            // player1: !state.player1,\n            activechecker: [rowid, colid]\n          }), fnc);\n    }\n\n    removeActiveChecker = ()=>{\n        this.setState({activechecker: [-1, -1]});\n    }\n    \n    componentDidMount = ()=>{\n    }\n    \n     componentWillUnmount = ()=>{\n    }\n\n    \n     render = ()=> {\n         if(this.state.player1 == true){\n            return(\n                <div>\n                <Board player1_checkers={this.state.player1_checkers} calculateMove={this.calculateMove} destroyactivechecker={this.removeActiveChecker} activechecker={this.state.activechecker} player2_checkers={this.state.player2_checkers} player1={this.state.player1} playermove={this.playerMove}/>\n                \n                <Display playerturn={1}/>\n                 </div>\n                );\n         }\n         else{\n            return(\n                <div>\n                <Board player1_checkers={this.state.player1_checkers}  calculateMove={this.calculateMove} destroyactivechecker={this.removeActiveChecker} activechecker={this.state.activechecker} player2_checkers={this.state.player2_checkers} player1={this.state.player1} playermove={this.playerMove}/>\n                \n                <Display playerturn={2} activechecker={this.state.activechecker}/>\n                 </div>\n                );\n         }\n       \n     }\n  }\n\n  export default Game;"]},"metadata":{},"sourceType":"module"}