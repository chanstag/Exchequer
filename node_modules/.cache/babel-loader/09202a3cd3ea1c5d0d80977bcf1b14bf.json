{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chandler\\\\Desktop\\\\checkers\\\\checkers\\\\src\\\\Row.js\";\nimport React from 'react';\nimport Tile from './Tile';\n\nclass Row extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  renderRow() {\n    let tiles = [];\n\n    for (let i = 0; i < 8; i++) {\n      if (this.props.redcheckers.includes(i)) {\n        if (this.props.color == true) {\n          if (i % 2 == 1) {\n            tiles.push(React.createElement(Tile, {\n              fill: true,\n              rowid: this.rowid,\n              colid: i,\n              checkercolor: \"red\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 20\n              },\n              __self: this\n            }));\n          } else {\n            tiles.push(React.createElement(Tile, {\n              fill: false,\n              rowid: this.rowid,\n              checkercolor: \"red\",\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 23\n              },\n              __self: this\n            }));\n          }\n        } else {\n          if (i % 2 == 1) {\n            tiles.push(React.createElement(Tile, {\n              fill: false,\n              rowid: this.rowid,\n              checkercolor: \"red\",\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 28\n              },\n              __self: this\n            }));\n          } else {\n            tiles.push(React.createElement(Tile, {\n              fill: true,\n              rowid: this.rowid,\n              checkercolor: \"red\",\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 31\n              },\n              __self: this\n            }));\n          }\n        }\n      } else if (this.props.greencheckers.includes(i)) {\n        if (this.props.color == true) {\n          if (i % 2 == 1) {\n            tiles.push(React.createElement(Tile, {\n              fill: true,\n              rowid: this.rowid,\n              colid: i,\n              checkercolor: \"green\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39\n              },\n              __self: this\n            }));\n          } else {\n            tiles.push(React.createElement(Tile, {\n              fill: false,\n              rowid: this.rowid,\n              checkercolor: \"green\",\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 42\n              },\n              __self: this\n            }));\n          }\n        } else {\n          if (i % 2 == 1) {\n            tiles.push(React.createElement(Tile, {\n              fill: false,\n              rowid: this.rowid,\n              checkercolor: \"green\",\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 47\n              },\n              __self: this\n            }));\n          } else {\n            tiles.push(React.createElement(Tile, {\n              fill: true,\n              rowid: this.rowid,\n              checkercolor: \"green\",\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50\n              },\n              __self: this\n            }));\n          }\n        }\n      } else {\n        if (this.props.color == true) {\n          if (i % 2 == 1) {\n            tiles.push(React.createElement(Tile, {\n              fill: true,\n              rowid: this.rowid,\n              colid: i,\n              checkercolor: null,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 58\n              },\n              __self: this\n            }));\n          } else {\n            tiles.push(React.createElement(Tile, {\n              fill: false,\n              rowid: this.rowid,\n              checkercolor: null,\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61\n              },\n              __self: this\n            }));\n          }\n        } else {\n          if (i % 2 == 1) {\n            tiles.push(React.createElement(Tile, {\n              fill: false,\n              rowid: this.rowid,\n              checkercolor: null,\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 66\n              },\n              __self: this\n            }));\n          } else {\n            tiles.push(React.createElement(Tile, {\n              fill: true,\n              rowid: this.rowid,\n              checkercolor: null,\n              colid: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            }));\n          }\n        }\n      }\n    }\n\n    return tiles;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: '100px;'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.renderRow());\n  }\n\n}\n\nexport default Row;","map":{"version":3,"sources":["C:\\Users\\Chandler\\Desktop\\checkers\\checkers\\src\\Row.js"],"names":["React","Tile","Row","Component","constructor","props","componentDidMount","componentWillUnmount","renderRow","tiles","i","redcheckers","includes","color","push","rowid","greencheckers","render","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AACDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,oBAAoB,GAAG,CACtB;;AAEDC,EAAAA,SAAS,GAAE;AACT,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,UAAG,KAAKL,KAAL,CAAWM,WAAX,CAAuBC,QAAvB,CAAgCF,CAAhC,CAAH,EAAsC;AACpC,YAAG,KAAKL,KAAL,CAAWQ,KAAX,IAAoB,IAAvB,EAA4B;AACxB,cAAGH,CAAC,GAAC,CAAF,IAAO,CAAV,EAAY;AACRD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,IAAZ;AAAkB,cAAA,KAAK,EAAE,KAAKC,KAA9B;AAAqC,cAAA,KAAK,EAAEL,CAA5C;AAA+C,cAAA,YAAY,EAAC,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,WAFH,MAGM;AACFD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,KAAZ;AAAmB,cAAA,KAAK,EAAE,KAAKC,KAA/B;AAAsC,cAAA,YAAY,EAAC,KAAnD;AAAyD,cAAA,KAAK,EAAEL,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;AACJ,SAPH,MAQM;AACF,cAAGA,CAAC,GAAC,CAAF,IAAO,CAAV,EAAY;AACRD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,KAAZ;AAAmB,cAAA,KAAK,EAAE,KAAKC,KAA/B;AAAsC,cAAA,YAAY,EAAC,KAAnD;AAAyD,cAAA,KAAK,EAAEL,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,WAFH,MAGM;AACFD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,IAAZ;AAAkB,cAAA,KAAK,EAAE,KAAKC,KAA9B;AAAqC,cAAA,YAAY,EAAC,KAAlD;AAAwD,cAAA,KAAK,EAAEL,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACH;AACF;AAEJ,OAlBD,MAmBK,IAAG,KAAKL,KAAL,CAAWW,aAAX,CAAyBJ,QAAzB,CAAkCF,CAAlC,CAAH,EAAwC;AAC3C,YAAG,KAAKL,KAAL,CAAWQ,KAAX,IAAoB,IAAvB,EAA4B;AACxB,cAAGH,CAAC,GAAC,CAAF,IAAO,CAAV,EAAY;AACRD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,IAAZ;AAAkB,cAAA,KAAK,EAAE,KAAKC,KAA9B;AAAqC,cAAA,KAAK,EAAEL,CAA5C;AAA+C,cAAA,YAAY,EAAC,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,WAFH,MAGM;AACFD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,KAAZ;AAAmB,cAAA,KAAK,EAAE,KAAKC,KAA/B;AAAsC,cAAA,YAAY,EAAC,OAAnD;AAA2D,cAAA,KAAK,EAAEL,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;AACJ,SAPH,MAQM;AACF,cAAGA,CAAC,GAAC,CAAF,IAAO,CAAV,EAAY;AACRD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,KAAZ;AAAmB,cAAA,KAAK,EAAE,KAAKC,KAA/B;AAAsC,cAAA,YAAY,EAAC,OAAnD;AAA2D,cAAA,KAAK,EAAEL,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,WAFH,MAGM;AACFD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,IAAZ;AAAkB,cAAA,KAAK,EAAE,KAAKC,KAA9B;AAAqC,cAAA,YAAY,EAAC,OAAlD;AAA0D,cAAA,KAAK,EAAEL,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACH;AACF;AAEJ,OAlBI,MAmBD;AACF,YAAG,KAAKL,KAAL,CAAWQ,KAAX,IAAoB,IAAvB,EAA4B;AACxB,cAAGH,CAAC,GAAC,CAAF,IAAO,CAAV,EAAY;AACRD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,IAAZ;AAAkB,cAAA,KAAK,EAAE,KAAKC,KAA9B;AAAqC,cAAA,KAAK,EAAEL,CAA5C;AAA+C,cAAA,YAAY,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,WAFH,MAGM;AACFD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,KAAZ;AAAmB,cAAA,KAAK,EAAE,KAAKC,KAA/B;AAAsC,cAAA,YAAY,EAAE,IAApD;AAA0D,cAAA,KAAK,EAAEL,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;AACJ,SAPH,MAQM;AACF,cAAGA,CAAC,GAAC,CAAF,IAAO,CAAV,EAAY;AACRD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,KAAZ;AAAmB,cAAA,KAAK,EAAE,KAAKC,KAA/B;AAAsC,cAAA,YAAY,EAAE,IAApD;AAA0D,cAAA,KAAK,EAAEL,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,WAFH,MAGM;AACFD,YAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAE,IAAZ;AAAkB,cAAA,KAAK,EAAE,KAAKC,KAA9B;AAAqC,cAAA,YAAY,EAAE,IAAnD;AAAyD,cAAA,KAAK,EAAEL,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACH;AACF;AAEJ;AAEJ;;AACD,WAAOD,KAAP;AACD;;AAEAQ,EAAAA,MAAM,GAAG;AACP,WACG;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKV,SAAL,EADF,CADH;AAID;;AAhF4B;;AAmFhC,eAAeN,GAAf","sourcesContent":["import React from 'react';\r\nimport Tile from './Tile'\r\n\r\nclass Row extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n    \r\n    renderRow(){\r\n      let tiles = []\r\n      for(let i = 0; i < 8; i++){\r\n          if(this.props.redcheckers.includes(i)){\r\n            if(this.props.color == true){\r\n                if(i%2 == 1){\r\n                    tiles.push(<Tile fill={true} rowid={this.rowid} colid={i} checkercolor=\"red\"/>)\r\n                  }\r\n                  else{\r\n                    tiles.push(<Tile fill={false} rowid={this.rowid} checkercolor=\"red\" colid={i}/>)\r\n                  }\r\n              }\r\n              else{\r\n                if(i%2 == 1){\r\n                    tiles.push(<Tile fill={false} rowid={this.rowid} checkercolor=\"red\" colid={i}/>)\r\n                  }\r\n                  else{\r\n                    tiles.push(<Tile fill={true} rowid={this.rowid} checkercolor=\"red\" colid={i}/>)\r\n                }\r\n              }\r\n\r\n          }\r\n          else if(this.props.greencheckers.includes(i)){\r\n            if(this.props.color == true){\r\n                if(i%2 == 1){\r\n                    tiles.push(<Tile fill={true} rowid={this.rowid} colid={i} checkercolor=\"green\"/>)\r\n                  }\r\n                  else{\r\n                    tiles.push(<Tile fill={false} rowid={this.rowid} checkercolor=\"green\" colid={i}/>)\r\n                  }\r\n              }\r\n              else{\r\n                if(i%2 == 1){\r\n                    tiles.push(<Tile fill={false} rowid={this.rowid} checkercolor=\"green\" colid={i}/>)\r\n                  }\r\n                  else{\r\n                    tiles.push(<Tile fill={true} rowid={this.rowid} checkercolor=\"green\" colid={i}/>)\r\n                }\r\n              }\r\n\r\n          }\r\n          else{\r\n            if(this.props.color == true){\r\n                if(i%2 == 1){\r\n                    tiles.push(<Tile fill={true} rowid={this.rowid} colid={i} checkercolor={null}/>)\r\n                  }\r\n                  else{\r\n                    tiles.push(<Tile fill={false} rowid={this.rowid} checkercolor={null} colid={i}/>)\r\n                  }\r\n              }\r\n              else{\r\n                if(i%2 == 1){\r\n                    tiles.push(<Tile fill={false} rowid={this.rowid} checkercolor={null} colid={i}/>)\r\n                  }\r\n                  else{\r\n                    tiles.push(<Tile fill={true} rowid={this.rowid} checkercolor={null} colid={i}/>)\r\n                }\r\n              }\r\n\r\n          }\r\n         \r\n      }\r\n      return tiles;\r\n    }\r\n    \r\n     render() {\r\n       return(\r\n          <div style={{height: '100px;'}}> \r\n           {this.renderRow()}\r\n         </div>);\r\n     }\r\n  }\r\n\r\n  export default Row;"]},"metadata":{},"sourceType":"module"}